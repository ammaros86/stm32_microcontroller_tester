
TestProgramm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006094  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006260  08006260  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006260  08006260  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006260  08006260  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006260  08006260  00016260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000118  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5f8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002681  00000000  00000000  0002f634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  00031cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  00032788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211b5  00000000  00000000  00033350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010515  00000000  00000000  00054505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9437  00000000  00000000  00064a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012de51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ad8  00000000  00000000  0012dea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006210 	.word	0x08006210

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08006210 	.word	0x08006210

080001d4 <intialADC>:

#include <adc_handler.h>

int intialADC(ADC_HandleTypeDef * hadc, uint32_t channel){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	  ADC_ChannelConfTypeDef sConfig = {0};
 80001de:	f107 0308 	add.w	r3, r7, #8
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]
 80001ee:	615a      	str	r2, [r3, #20]
	  hadc->Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2200      	movs	r2, #0
 80001f4:	605a      	str	r2, [r3, #4]
	  hadc->Init.Resolution = ADC_RESOLUTION_12B;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	609a      	str	r2, [r3, #8]
	  hadc->Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2200      	movs	r2, #0
 8000200:	611a      	str	r2, [r3, #16]
	  hadc->Init.ContinuousConvMode = DISABLE;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2200      	movs	r2, #0
 8000206:	765a      	strb	r2, [r3, #25]
	  hadc->Init.DiscontinuousConvMode = DISABLE;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2200      	movs	r2, #0
 800020c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2201      	movs	r2, #1
 800021a:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
	  hadc->Init.NbrOfConversion = 1;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2201      	movs	r2, #1
 8000226:	61da      	str	r2, [r3, #28]
	  hadc->Init.DMAContinuousRequests = DISABLE;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2204      	movs	r2, #4
 8000234:	615a      	str	r2, [r3, #20]
	  hadc->Init.LowPowerAutoWait = DISABLE;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	761a      	strb	r2, [r3, #24]
	  hadc->Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2200      	movs	r2, #0
 8000240:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_ADC_Init(hadc) != HAL_OK)
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f001 fc38 	bl	8001ab8 <HAL_ADC_Init>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d002      	beq.n	8000254 <intialADC+0x80>
	  {
		  return ADC_INIT_ERROR;
 800024e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000252:	e018      	b.n	8000286 <intialADC+0xb2>
	  }
	  sConfig.Channel = channel;
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000258:	2301      	movs	r3, #1
 800025a:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800025c:	2300      	movs	r3, #0
 800025e:	617b      	str	r3, [r7, #20]
	  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000260:	2306      	movs	r3, #6
 8000262:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800026c:	f107 0308 	add.w	r3, r7, #8
 8000270:	4619      	mov	r1, r3
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f002 f876 	bl	8002364 <HAL_ADC_ConfigChannel>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d002      	beq.n	8000284 <intialADC+0xb0>
	  {
	    return ADC_SET_CHANNEL_ERROR;
 800027e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000282:	e000      	b.n	8000286 <intialADC+0xb2>
	  }
	  return 1;
 8000284:	2301      	movs	r3, #1
}
 8000286:	4618      	mov	r0, r3
 8000288:	3720      	adds	r7, #32
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <readAdc>:

uint16_t readAdc(ADC_HandleTypeDef * hadc){
 800028e:	b580      	push	{r7, lr}
 8000290:	b084      	sub	sp, #16
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
	uint16_t adcValue = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	81fb      	strh	r3, [r7, #14]
	if(HAL_ADC_Start(hadc) != HAL_OK){
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f001 fe06 	bl	8001eac <HAL_ADC_Start>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d002      	beq.n	80002ac <readAdc+0x1e>
		return ADC_START_ERROR;
 80002a6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80002aa:	e01a      	b.n	80002e2 <readAdc+0x54>
	}
	if(HAL_ADC_PollForConversion(hadc, 300) == HAL_OK){
 80002ac:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f001 ff47 	bl	8002144 <HAL_ADC_PollForConversion>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d10b      	bne.n	80002d4 <readAdc+0x46>
	  adcValue = HAL_ADC_GetValue(hadc);
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f002 f843 	bl	8002348 <HAL_ADC_GetValue>
 80002c2:	4603      	mov	r3, r0
 80002c4:	81fb      	strh	r3, [r7, #14]
	}else{
		return ADC_POLL_CONVERSION_ERROR;
	}
	if(HAL_ADC_Stop(hadc) != HAL_OK){
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f001 ff06 	bl	80020d8 <HAL_ADC_Stop>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d006      	beq.n	80002e0 <readAdc+0x52>
 80002d2:	e002      	b.n	80002da <readAdc+0x4c>
		return ADC_POLL_CONVERSION_ERROR;
 80002d4:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80002d8:	e003      	b.n	80002e2 <readAdc+0x54>
		return ADC_STOP_ERROR;
 80002da:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80002de:	e000      	b.n	80002e2 <readAdc+0x54>
	}
 	return adcValue;
 80002e0:	89fb      	ldrh	r3, [r7, #14]
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <handleUartCommand>:
/*
 * handle UART Command
 * Parameter:
 * buffer: UART Buffer
  */
void handleUartCommand(uint16_t receivedValue){
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b084      	sub	sp, #16
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	4603      	mov	r3, r0
 80002f2:	80fb      	strh	r3, [r7, #6]
 	if(receivedValue == COMMAND_TEST_FLASH_MEMORY){
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d102      	bne.n	8000304 <handleUartCommand+0x1a>
		testFlashMemory();
 80002fe:	f000 f8bf 	bl	8000480 <testFlashMemory>
			handleDigitalGpio(receivedValue);
		}
	}else{
		initialGpio(receivedValue);
	}
}
 8000302:	e025      	b.n	8000350 <handleUartCommand+0x66>
 	}else if(receivedValue == COMMAND_READ_TEMPERATURE_SENSOR){
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800030a:	4293      	cmp	r3, r2
 800030c:	d108      	bne.n	8000320 <handleUartCommand+0x36>
 		uint16_t temperatureSensorValue = getTemperatureSensorValue();
 800030e:	f000 fc6b 	bl	8000be8 <getTemperatureSensorValue>
 8000312:	4603      	mov	r3, r0
 8000314:	81fb      	strh	r3, [r7, #14]
 		sendAdcValue(temperatureSensorValue);
 8000316:	89fb      	ldrh	r3, [r7, #14]
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fc7f 	bl	8000c1c <sendAdcValue>
}
 800031e:	e017      	b.n	8000350 <handleUartCommand+0x66>
	}else if(receivedValue & (1 << COMMAND_TYPE_INIT)){
 8000320:	88fb      	ldrh	r3, [r7, #6]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d00e      	beq.n	8000348 <handleUartCommand+0x5e>
		if((receivedValue & HANDLE_TYPE_MASK) == COMMAND_READ_ANALOG){
 800032a:	88fb      	ldrh	r3, [r7, #6]
 800032c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000330:	2b30      	cmp	r3, #48	; 0x30
 8000332:	d104      	bne.n	800033e <handleUartCommand+0x54>
			readAnalogValue(receivedValue);
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 fc92 	bl	8000c60 <readAnalogValue>
}
 800033c:	e008      	b.n	8000350 <handleUartCommand+0x66>
			handleDigitalGpio(receivedValue);
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fa33 	bl	80007ac <handleDigitalGpio>
}
 8000346:	e003      	b.n	8000350 <handleUartCommand+0x66>
		initialGpio(receivedValue);
 8000348:	88fb      	ldrh	r3, [r7, #6]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f930 	bl	80005b0 <initialGpio>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <checkEmptyFlashMemory>:

/*
 * checkEmptyFlashMemory: control if the page contain address is empty page
 * Parameter:
 * address: Flash-Memory Address */
uint32_t checkEmptyFlashMemory(uint32_t address) {
 8000358:	b480      	push	{r7}
 800035a:	b087      	sub	sp, #28
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
    uint32_t pageStartAddress = address & ~(FLASH_PAGE_SIZE - 1);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000366:	f023 0307 	bic.w	r3, r3, #7
 800036a:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < FLASH_PAGE_SIZE / 4; i++) {
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
 8000370:	e00f      	b.n	8000392 <checkEmptyFlashMemory+0x3a>
        uint32_t data = *(__IO uint32_t *)(address + i * 4);
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	461a      	mov	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4413      	add	r3, r2
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	60fb      	str	r3, [r7, #12]
        if (data != 0xFFFFFFFF) {
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000386:	d001      	beq.n	800038c <checkEmptyFlashMemory+0x34>
            return 0; // Page hat nicht den Wert 0xFFFFFFFF
 8000388:	2300      	movs	r3, #0
 800038a:	e007      	b.n	800039c <checkEmptyFlashMemory+0x44>
    for (int i = 0; i < FLASH_PAGE_SIZE / 4; i++) {
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	3301      	adds	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000398:	dbeb      	blt.n	8000372 <checkEmptyFlashMemory+0x1a>
        }
    }
    return pageStartAddress; // Page hat den Wert 0xFFFFFFFF, Rückgabe der Page-Startadresse
 800039a:	693b      	ldr	r3, [r7, #16]
}
 800039c:	4618      	mov	r0, r3
 800039e:	371c      	adds	r7, #28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <sendFlashMemoryTestResult>:

/*
 * send flash Test Result
 * Parameter:
 * testResult: Flash Result Structure */
void sendFlashMemoryTestResult(FLASH_TestResultTypeDef *testResult){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	; 0x28
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	uint8_t buffer[24];
 	if(testResult != NULL){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d054      	beq.n	8000460 <sendFlashMemoryTestResult+0xb8>
		size_t bufferOffset = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	627b      	str	r3, [r7, #36]	; 0x24
		memcpy(buffer + bufferOffset, &testResult->testedPages, sizeof(uint16_t));
 80003ba:	f107 020c 	add.w	r2, r7, #12
 80003be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c0:	4413      	add	r3, r2
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	8812      	ldrh	r2, [r2, #0]
 80003c6:	b292      	uxth	r2, r2
 80003c8:	801a      	strh	r2, [r3, #0]
		bufferOffset += sizeof(uint16_t);
 80003ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003cc:	3302      	adds	r3, #2
 80003ce:	627b      	str	r3, [r7, #36]	; 0x24
		memcpy(buffer + bufferOffset, &testResult->erasedPages, sizeof(uint16_t));
 80003d0:	f107 020c 	add.w	r2, r7, #12
 80003d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d6:	4413      	add	r3, r2
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	3202      	adds	r2, #2
 80003dc:	8812      	ldrh	r2, [r2, #0]
 80003de:	b292      	uxth	r2, r2
 80003e0:	801a      	strh	r2, [r3, #0]
		bufferOffset += sizeof(uint16_t);
 80003e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e4:	3302      	adds	r3, #2
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24
		memcpy(buffer + bufferOffset, &testResult->writedAddresses, sizeof(uint32_t));
 80003e8:	f107 020c 	add.w	r2, r7, #12
 80003ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ee:	4413      	add	r3, r2
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	3204      	adds	r2, #4
 80003f4:	6812      	ldr	r2, [r2, #0]
 80003f6:	601a      	str	r2, [r3, #0]
		bufferOffset += sizeof(uint32_t);
 80003f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003fa:	3304      	adds	r3, #4
 80003fc:	627b      	str	r3, [r7, #36]	; 0x24
		memcpy(buffer + bufferOffset, &testResult->writedAddressesError, sizeof(uint32_t));
 80003fe:	f107 020c 	add.w	r2, r7, #12
 8000402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000404:	4413      	add	r3, r2
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	3208      	adds	r2, #8
 800040a:	6812      	ldr	r2, [r2, #0]
 800040c:	601a      	str	r2, [r3, #0]
		bufferOffset += sizeof(uint32_t);
 800040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000410:	3304      	adds	r3, #4
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
		memcpy(buffer + bufferOffset, &testResult->readedAddresses, sizeof(uint32_t));
 8000414:	f107 020c 	add.w	r2, r7, #12
 8000418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800041a:	4413      	add	r3, r2
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	320c      	adds	r2, #12
 8000420:	6812      	ldr	r2, [r2, #0]
 8000422:	601a      	str	r2, [r3, #0]
		bufferOffset += sizeof(uint32_t);
 8000424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000426:	3304      	adds	r3, #4
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
		memcpy(buffer + bufferOffset, &testResult->readedAddressesError, sizeof(uint32_t));
 800042a:	f107 020c 	add.w	r2, r7, #12
 800042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000430:	4413      	add	r3, r2
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	3210      	adds	r2, #16
 8000436:	6812      	ldr	r2, [r2, #0]
 8000438:	601a      	str	r2, [r3, #0]
		bufferOffset += sizeof(uint32_t);
 800043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800043c:	3304      	adds	r3, #4
 800043e:	627b      	str	r3, [r7, #36]	; 0x24
		memcpy(buffer + bufferOffset, &testResult->erasedPagesError, sizeof(uint32_t));
 8000440:	f107 020c 	add.w	r2, r7, #12
 8000444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000446:	4413      	add	r3, r2
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	3214      	adds	r2, #20
 800044c:	6812      	ldr	r2, [r2, #0]
 800044e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, buffer, 24, 10);
 8000450:	f107 010c 	add.w	r1, r7, #12
 8000454:	230a      	movs	r3, #10
 8000456:	2218      	movs	r2, #24
 8000458:	4808      	ldr	r0, [pc, #32]	; (800047c <sendFlashMemoryTestResult+0xd4>)
 800045a:	f005 f80f 	bl	800547c <HAL_UART_Transmit>
	}else{
		buffer[0] = 0;
		HAL_UART_Transmit(&huart2, buffer, 24, 10);
	}
}
 800045e:	e008      	b.n	8000472 <sendFlashMemoryTestResult+0xca>
		buffer[0] = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, buffer, 24, 10);
 8000464:	f107 010c 	add.w	r1, r7, #12
 8000468:	230a      	movs	r3, #10
 800046a:	2218      	movs	r2, #24
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <sendFlashMemoryTestResult+0xd4>)
 800046e:	f005 f805 	bl	800547c <HAL_UART_Transmit>
}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	2000002c 	.word	0x2000002c

08000480 <testFlashMemory>:

/*
 * test Flash-Memory
 *  */
void testFlashMemory(){
 8000480:	b5b0      	push	{r4, r5, r7, lr}
 8000482:	b092      	sub	sp, #72	; 0x48
 8000484:	af00      	add	r7, sp, #0
	FLASH_TestResultTypeDef testResult ={};
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]
 8000496:	615a      	str	r2, [r3, #20]
	uint32_t address ;
	uint32_t pageError;
	uint32_t pattern = 0xA1A1A1A1;
 8000498:	f04f 33a1 	mov.w	r3, #2711724449	; 0xa1a1a1a1
 800049c:	63bb      	str	r3, [r7, #56]	; 0x38
	for (address = FLASH_START_ADDR; address <= FLASH_END_ADDR; address += 0x800) {
 800049e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004a2:	647b      	str	r3, [r7, #68]	; 0x44
 80004a4:	e074      	b.n	8000590 <testFlashMemory+0x110>
		if (*(uint32_t*)address == 0xFFFFFFFF) {
 80004a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004ae:	d16b      	bne.n	8000588 <testFlashMemory+0x108>
			uint32_t pageStartAddress = checkEmptyFlashMemory(address);
 80004b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80004b2:	f7ff ff51 	bl	8000358 <checkEmptyFlashMemory>
 80004b6:	6378      	str	r0, [r7, #52]	; 0x34
			if(pageStartAddress != 0){
 80004b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d064      	beq.n	8000588 <testFlashMemory+0x108>
			  testResult.testedPages ++;
 80004be:	8a3b      	ldrh	r3, [r7, #16]
 80004c0:	3301      	adds	r3, #1
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	823b      	strh	r3, [r7, #16]
			  HAL_FLASH_Unlock();
 80004c6:	f002 feed 	bl	80032a4 <HAL_FLASH_Unlock>
				for (int offset = 0; offset < FLASH_PAGE_SIZE ; offset+=4) {
 80004ca:	2300      	movs	r3, #0
 80004cc:	643b      	str	r3, [r7, #64]	; 0x40
 80004ce:	e01c      	b.n	800050a <testFlashMemory+0x8a>
					HAL_StatusTypeDef writeStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageStartAddress + offset, pattern);
 80004d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80004d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004d4:	18d1      	adds	r1, r2, r3
 80004d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004d8:	2200      	movs	r2, #0
 80004da:	461c      	mov	r4, r3
 80004dc:	4615      	mov	r5, r2
 80004de:	4622      	mov	r2, r4
 80004e0:	462b      	mov	r3, r5
 80004e2:	2002      	movs	r0, #2
 80004e4:	f002 fe6e 	bl	80031c4 <HAL_FLASH_Program>
 80004e8:	4603      	mov	r3, r0
 80004ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if (writeStatus == HAL_OK) {
 80004ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d103      	bne.n	80004fe <testFlashMemory+0x7e>
						testResult.writedAddresses++;
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e002      	b.n	8000504 <testFlashMemory+0x84>
					}else{
						testResult.writedAddressesError ++;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	3301      	adds	r3, #1
 8000502:	61bb      	str	r3, [r7, #24]
				for (int offset = 0; offset < FLASH_PAGE_SIZE ; offset+=4) {
 8000504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000506:	3304      	adds	r3, #4
 8000508:	643b      	str	r3, [r7, #64]	; 0x40
 800050a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800050c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000510:	dbde      	blt.n	80004d0 <testFlashMemory+0x50>
					}
				}
				HAL_FLASH_Lock();
 8000512:	f002 feed 	bl	80032f0 <HAL_FLASH_Lock>
				for (int offset = 0; offset < FLASH_PAGE_SIZE ; offset+=4) {
 8000516:	2300      	movs	r3, #0
 8000518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800051a:	e011      	b.n	8000540 <testFlashMemory+0xc0>
					uint32_t data = *(__IO uint32_t *)(pageStartAddress + offset);
 800051c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800051e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000520:	4413      	add	r3, r2
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	62fb      	str	r3, [r7, #44]	; 0x2c
					testResult.readedAddresses ++;
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	3301      	adds	r3, #1
 800052a:	61fb      	str	r3, [r7, #28]
					if (data != pattern) {
 800052c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800052e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000530:	429a      	cmp	r2, r3
 8000532:	d002      	beq.n	800053a <testFlashMemory+0xba>
						testResult.readedAddressesError++;
 8000534:	6a3b      	ldr	r3, [r7, #32]
 8000536:	3301      	adds	r3, #1
 8000538:	623b      	str	r3, [r7, #32]
				for (int offset = 0; offset < FLASH_PAGE_SIZE ; offset+=4) {
 800053a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800053c:	3304      	adds	r3, #4
 800053e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000546:	dbe9      	blt.n	800051c <testFlashMemory+0x9c>
					}
				}

				HAL_FLASH_Unlock();
 8000548:	f002 feac 	bl	80032a4 <HAL_FLASH_Unlock>
				FLASH_EraseInitTypeDef flashEraseInitStruct;
				flashEraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]
				flashEraseInitStruct.PageAddress = address;
 8000550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000552:	607b      	str	r3, [r7, #4]
				flashEraseInitStruct.NbPages = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
				HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&flashEraseInitStruct, &pageError);
 8000558:	f107 020c 	add.w	r2, r7, #12
 800055c:	463b      	mov	r3, r7
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f002 ff63 	bl	800342c <HAL_FLASHEx_Erase>
 8000566:	4603      	mov	r3, r0
 8000568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(status == HAL_OK){
 800056c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000570:	2b00      	cmp	r3, #0
 8000572:	d104      	bne.n	800057e <testFlashMemory+0xfe>
					testResult.erasedPages ++;
 8000574:	8a7b      	ldrh	r3, [r7, #18]
 8000576:	3301      	adds	r3, #1
 8000578:	b29b      	uxth	r3, r3
 800057a:	827b      	strh	r3, [r7, #18]
 800057c:	e002      	b.n	8000584 <testFlashMemory+0x104>
				}else{
					testResult.erasedPagesError ++;
 800057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000580:	3301      	adds	r3, #1
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
				}
				HAL_FLASH_Lock();
 8000584:	f002 feb4 	bl	80032f0 <HAL_FLASH_Lock>
	for (address = FLASH_START_ADDR; address <= FLASH_END_ADDR; address += 0x800) {
 8000588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800058a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
 8000590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <testFlashMemory+0x12c>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d986      	bls.n	80004a6 <testFlashMemory+0x26>
			}
		}
	}
	sendFlashMemoryTestResult(&testResult);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff03 	bl	80003a8 <sendFlashMemoryTestResult>
}
 80005a2:	bf00      	nop
 80005a4:	3748      	adds	r7, #72	; 0x48
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bdb0      	pop	{r4, r5, r7, pc}
 80005aa:	bf00      	nop
 80005ac:	0807ffff 	.word	0x0807ffff

080005b0 <initialGpio>:

/*
 * initial GPIO
 * Parameter:
 * command: UART received Command */
void initialGpio(uint16_t command){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	resetGpiosRegisters();
 80005ba:	f000 f94f 	bl	800085c <resetGpiosRegisters>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = getInitialMode(command);
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f82d 	bl	8000630 <getInitialMode>
 80005d6:	4603      	mov	r3, r0
 80005d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = getInitialPullType(command);
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f85d 	bl	800069c <getInitialPullType>
 80005e2:	4603      	mov	r3, r0
 80005e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = getInitialSpeed(command);
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f879 	bl	80006e0 <getInitialSpeed>
 80005ee:	4603      	mov	r3, r0
 80005f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = getGpioNumber(command, COMMAND_INIT_GPIO_MASK, COMMAND_INIT_GPIO_SHIFT);
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	220b      	movs	r2, #11
 80005f6:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f9b4 	bl	8000968 <getGpioNumber>
 8000600:	4603      	mov	r3, r0
 8000602:	60bb      	str	r3, [r7, #8]
	GPIO_TypeDef * gpioPort = getGpioPort(command);
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f88e 	bl	8000728 <getGpioPort>
 800060c:	61f8      	str	r0, [r7, #28]
	if(gpioPort != NULL){
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d005      	beq.n	8000620 <initialGpio+0x70>
		HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	4619      	mov	r1, r3
 800061a:	69f8      	ldr	r0, [r7, #28]
 800061c:	f002 ffaa 	bl	8003574 <HAL_GPIO_Init>
	}
	sendGpiosRegistersState(command);
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fa78 	bl	8000b18 <sendGpiosRegistersState>
}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <getInitialMode>:

/*
 * get GPIO Initial Mode
 * Parameter:
 * command: UART received Command */
uint32_t getInitialMode(uint16_t command){
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
 	if((command & COMMAND_INIT_MODE_MASK)  == COMMAND_Init_DIGITAL_INPUT){
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000640:	2b10      	cmp	r3, #16
 8000642:	d101      	bne.n	8000648 <getInitialMode+0x18>
		return GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	e023      	b.n	8000690 <getInitialMode+0x60>
	}else if((command & COMMAND_INIT_MODE_MASK)  == COMMAND_Init_DIGITAL_OUTPUT_PP){
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800064e:	2b20      	cmp	r3, #32
 8000650:	d101      	bne.n	8000656 <getInitialMode+0x26>
 		return GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	e01c      	b.n	8000690 <getInitialMode+0x60>
	}else if((command & COMMAND_INIT_MODE_MASK) == COMMAND_Init_DIGITAL_OUTPUT_OD){
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800065c:	2b30      	cmp	r3, #48	; 0x30
 800065e:	d101      	bne.n	8000664 <getInitialMode+0x34>
		return GPIO_MODE_OUTPUT_OD;
 8000660:	2311      	movs	r3, #17
 8000662:	e015      	b.n	8000690 <getInitialMode+0x60>
	}else if((command & COMMAND_INIT_MODE_MASK) == COMMAND_Init_DIGITAL_OUTPUT_AF_PP){
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800066a:	2b40      	cmp	r3, #64	; 0x40
 800066c:	d101      	bne.n	8000672 <getInitialMode+0x42>
		return GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	e00e      	b.n	8000690 <getInitialMode+0x60>
	}else if((command & COMMAND_INIT_MODE_MASK) == COMMAND_Init_DIGITAL_OUTPUT_AF_OD){
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000678:	2b50      	cmp	r3, #80	; 0x50
 800067a:	d101      	bne.n	8000680 <getInitialMode+0x50>
		return GPIO_MODE_AF_OD;
 800067c:	2312      	movs	r3, #18
 800067e:	e007      	b.n	8000690 <getInitialMode+0x60>
	}else if((command & COMMAND_INIT_MODE_MASK)  == COMMAND_Init_ANALOGE){
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000686:	2b60      	cmp	r3, #96	; 0x60
 8000688:	d101      	bne.n	800068e <getInitialMode+0x5e>
		return GPIO_MODE_ANALOG;
 800068a:	2303      	movs	r3, #3
 800068c:	e000      	b.n	8000690 <getInitialMode+0x60>
	}else{
		return GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
	}
}
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <getInitialPullType>:

/*
 * get GPIO Initial Pull Type
 * Parameter:
 * command: UART received Command */
uint32_t getInitialPullType(uint16_t command){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
	if((command & COMMAND_Init_PULL_MASK)== COMMAND_Init_NO_PULL){
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d101      	bne.n	80006b4 <getInitialPullType+0x18>
		return GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	e00f      	b.n	80006d4 <getInitialPullType+0x38>
	}else if((command & COMMAND_Init_PULL_MASK) == COMMAND_Init_PULL_UP){
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80006ba:	2b80      	cmp	r3, #128	; 0x80
 80006bc:	d101      	bne.n	80006c2 <getInitialPullType+0x26>
		return GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	e008      	b.n	80006d4 <getInitialPullType+0x38>
	}else if((command & COMMAND_Init_PULL_MASK) == COMMAND_Init_PULL_DOWN){
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80006c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006cc:	d101      	bne.n	80006d2 <getInitialPullType+0x36>
		return GPIO_PULLDOWN;
 80006ce:	2302      	movs	r3, #2
 80006d0:	e000      	b.n	80006d4 <getInitialPullType+0x38>
	}else{
		 return GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
	}
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <getInitialSpeed>:

/*
 * get GPIO Initial Speed
 * Parameter:
 * command: UART received Command */
uint32_t getInitialSpeed(uint16_t command){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	if((command & COMMAND_Init_GPIO_SPEED_FREQ_MASK)  == COMMAND_Init_GPIO_SPEED_FREQ_LOW){
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d101      	bne.n	80006f8 <getInitialSpeed+0x18>
		return GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	e010      	b.n	800071a <getInitialSpeed+0x3a>
	}else if((command & COMMAND_Init_GPIO_SPEED_FREQ_MASK) == COMMAND_Init_GPIO_SPEED_FREQ_MEDIUM){
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000702:	d101      	bne.n	8000708 <getInitialSpeed+0x28>
		return GPIO_SPEED_FREQ_MEDIUM;
 8000704:	2301      	movs	r3, #1
 8000706:	e008      	b.n	800071a <getInitialSpeed+0x3a>
	}else if((command & COMMAND_Init_GPIO_SPEED_FREQ_MASK) == COMMAND_Init_GPIO_SPEED_FREQ_HIGH){
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800070e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000712:	d101      	bne.n	8000718 <getInitialSpeed+0x38>
		return GPIO_SPEED_FREQ_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	e000      	b.n	800071a <getInitialSpeed+0x3a>
	}else{
 		return GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
	}
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <getGpioPort>:

/*
 * get GPIO Port
 * Parameter:
 * command: UART received Command */
GPIO_TypeDef *getGpioPort(uint16_t command){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	if((command & COMMAND_PORT_MASK) == COMMAND_PORT_A){
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	f003 030e 	and.w	r3, r3, #14
 8000738:	2b02      	cmp	r3, #2
 800073a:	d102      	bne.n	8000742 <getGpioPort+0x1a>
		return GPIOA;
 800073c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000740:	e023      	b.n	800078a <getGpioPort+0x62>
	}else if((command & COMMAND_PORT_MASK) == COMMAND_PORT_B){
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	f003 030e 	and.w	r3, r3, #14
 8000748:	2b04      	cmp	r3, #4
 800074a:	d101      	bne.n	8000750 <getGpioPort+0x28>
		return GPIOB;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <getGpioPort+0x70>)
 800074e:	e01c      	b.n	800078a <getGpioPort+0x62>
	}else if(((command & COMMAND_PORT_MASK) == COMMAND_PORT_C)){
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	f003 030e 	and.w	r3, r3, #14
 8000756:	2b06      	cmp	r3, #6
 8000758:	d101      	bne.n	800075e <getGpioPort+0x36>
		return GPIOC;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <getGpioPort+0x74>)
 800075c:	e015      	b.n	800078a <getGpioPort+0x62>
	}else if(((command & COMMAND_PORT_MASK) == COMMAND_PORT_D)){
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	f003 030e 	and.w	r3, r3, #14
 8000764:	2b08      	cmp	r3, #8
 8000766:	d101      	bne.n	800076c <getGpioPort+0x44>
		return GPIOD;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <getGpioPort+0x78>)
 800076a:	e00e      	b.n	800078a <getGpioPort+0x62>
	}else if(((command & COMMAND_PORT_MASK) == COMMAND_PORT_E)){
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	f003 030e 	and.w	r3, r3, #14
 8000772:	2b0a      	cmp	r3, #10
 8000774:	d101      	bne.n	800077a <getGpioPort+0x52>
		return GPIOE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <getGpioPort+0x7c>)
 8000778:	e007      	b.n	800078a <getGpioPort+0x62>
	}else if(((command & COMMAND_PORT_MASK) == COMMAND_PORT_F)){
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	f003 030e 	and.w	r3, r3, #14
 8000780:	2b0c      	cmp	r3, #12
 8000782:	d101      	bne.n	8000788 <getGpioPort+0x60>
		return GPIOF;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <getGpioPort+0x80>)
 8000786:	e000      	b.n	800078a <getGpioPort+0x62>
	}else{
		return NULL;
 8000788:	2300      	movs	r3, #0
	}
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	48000400 	.word	0x48000400
 800079c:	48000800 	.word	0x48000800
 80007a0:	48000c00 	.word	0x48000c00
 80007a4:	48001000 	.word	0x48001000
 80007a8:	48001400 	.word	0x48001400

080007ac <handleDigitalGpio>:
/*
 * handle Digital Output / Input
 * Parameter:
 * command: UART received Command
 */
void handleDigitalGpio(uint16_t command){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
	if(((command & HANDLE_TYPE_MASK) == COMMAND_WRITE_DIGITIAL_OUTPUT_LEVEL_HIGH) || ((command & HANDLE_TYPE_MASK) == COMMAND_WRITE_DIGITIAL_OUTPUT_LEVEL_LOW)){
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80007bc:	2b10      	cmp	r3, #16
 80007be:	d004      	beq.n	80007ca <handleDigitalGpio+0x1e>
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80007c6:	2b20      	cmp	r3, #32
 80007c8:	d104      	bne.n	80007d4 <handleDigitalGpio+0x28>
		setDigitalGpioOutputLevelState(command);
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f80a 	bl	80007e6 <setDigitalGpioOutputLevelState>
 80007d2:	e004      	b.n	80007de <handleDigitalGpio+0x32>
	}else{
		readDigitalGpioLevelState(command);
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f833 	bl	8000842 <readDigitalGpioLevelState>
	}
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <setDigitalGpioOutputLevelState>:
/*
 * set Digital Output Level
 * Parameter:
 * command: UART received Command
 */
void setDigitalGpioOutputLevelState(uint16_t command){
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState gpioOutputState;
	if((command & HANDLE_TYPE_MASK) == COMMAND_WRITE_DIGITIAL_OUTPUT_LEVEL_HIGH){
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80007f6:	2b10      	cmp	r3, #16
 80007f8:	d102      	bne.n	8000800 <setDigitalGpioOutputLevelState+0x1a>
		gpioOutputState = GPIO_PIN_SET;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
 80007fe:	e001      	b.n	8000804 <setDigitalGpioOutputLevelState+0x1e>
	}else{
		gpioOutputState = GPIO_PIN_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]
	}
 	uint16_t  gpioNumber = getGpioNumber(command, COMMAND_HANDLE_GPIO_MASK, COMMAND_HANDLE_GPIO_SHIFT);
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	2207      	movs	r2, #7
 8000808:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f8ab 	bl	8000968 <getGpioNumber>
 8000812:	4603      	mov	r3, r0
 8000814:	81bb      	strh	r3, [r7, #12]
	GPIO_TypeDef *gpioPort = getGpioPort(command);
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff85 	bl	8000728 <getGpioPort>
 800081e:	60b8      	str	r0, [r7, #8]
	if(gpioPort != NULL){
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d005      	beq.n	8000832 <setDigitalGpioOutputLevelState+0x4c>
 		HAL_GPIO_WritePin(gpioPort, gpioNumber, gpioOutputState);
 8000826:	7bfa      	ldrb	r2, [r7, #15]
 8000828:	89bb      	ldrh	r3, [r7, #12]
 800082a:	4619      	mov	r1, r3
 800082c:	68b8      	ldr	r0, [r7, #8]
 800082e:	f003 f917 	bl	8003a60 <HAL_GPIO_WritePin>
	}else{
		//Handle initial Failure
	}
	sendGpiosRegistersState(command);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f96f 	bl	8000b18 <sendGpiosRegistersState>
}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <readDigitalGpioLevelState>:
/*
 * read GPIO Input
 * Parameter:
 * command: UART received Command
 */
void readDigitalGpioLevelState(uint16_t command){
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	80fb      	strh	r3, [r7, #6]
	sendGpiosRegistersState(command);
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f962 	bl	8000b18 <sendGpiosRegistersState>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <resetGpiosRegisters>:

/*
 * reset GPIOs Registers
  */
void resetGpiosRegisters(){ //TODO not testable pins not reset
 800085c:	b580      	push	{r7, lr}
 800085e:	b090      	sub	sp, #64	; 0x40
 8000860:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOA, 0x9FF3);
 8000862:	f649 71f3 	movw	r1, #40947	; 0x9ff3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f003 f80d 	bl	8003888 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_All);
 800086e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000872:	4838      	ldr	r0, [pc, #224]	; (8000954 <resetGpiosRegisters+0xf8>)
 8000874:	f003 f808 	bl	8003888 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, 0xDFFF);
 8000878:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <resetGpiosRegisters+0xfc>)
 800087e:	f003 f803 	bl	8003888 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOD, GPIO_PIN_All);
 8000882:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000886:	4835      	ldr	r0, [pc, #212]	; (800095c <resetGpiosRegisters+0x100>)
 8000888:	f002 fffe 	bl	8003888 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOE, GPIO_PIN_All);
 800088c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000890:	4833      	ldr	r0, [pc, #204]	; (8000960 <resetGpiosRegisters+0x104>)
 8000892:	f002 fff9 	bl	8003888 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOF, GPIO_PIN_All);
 8000896:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800089a:	4832      	ldr	r0, [pc, #200]	; (8000964 <resetGpiosRegisters+0x108>)
 800089c:	f002 fff4 	bl	8003888 <HAL_GPIO_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008b4:	2302      	movs	r3, #2
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = 0x9FF3;
 80008bc:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f002 fe52 	bl	8003574 <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct2 = {0};
 80008d0:	f107 0318 	add.w	r3, r7, #24
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct2.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct2.Pull = GPIO_PULLDOWN;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct2.Pin = GPIO_PIN_All;
 80008ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitTypeDef GPIO_InitStruct3 = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct3.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct3.Pull = GPIO_PULLDOWN;
 8000904:	2302      	movs	r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct3.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct3.Pin = 0xDFFF;
 800090c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000910:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct2);
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	4619      	mov	r1, r3
 8000918:	480e      	ldr	r0, [pc, #56]	; (8000954 <resetGpiosRegisters+0xf8>)
 800091a:	f002 fe2b 	bl	8003574 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct3);
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <resetGpiosRegisters+0xfc>)
 8000924:	f002 fe26 	bl	8003574 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct2);
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	4619      	mov	r1, r3
 800092e:	480b      	ldr	r0, [pc, #44]	; (800095c <resetGpiosRegisters+0x100>)
 8000930:	f002 fe20 	bl	8003574 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct2);
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4619      	mov	r1, r3
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <resetGpiosRegisters+0x104>)
 800093c:	f002 fe1a 	bl	8003574 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct2);
 8000940:	f107 0318 	add.w	r3, r7, #24
 8000944:	4619      	mov	r1, r3
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <resetGpiosRegisters+0x108>)
 8000948:	f002 fe14 	bl	8003574 <HAL_GPIO_Init>
}
 800094c:	bf00      	nop
 800094e:	3740      	adds	r7, #64	; 0x40
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	48000400 	.word	0x48000400
 8000958:	48000800 	.word	0x48000800
 800095c:	48000c00 	.word	0x48000c00
 8000960:	48001000 	.word	0x48001000
 8000964:	48001400 	.word	0x48001400

08000968 <getGpioNumber>:
 * Parameter:
 * command: UART received Command
 * mask: Command GPIOs Mask
 * shiftNum: number of Shift
 *   */
uint16_t getGpioNumber(uint16_t command, uint16_t mask, int shiftNum){
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	603a      	str	r2, [r7, #0]
 8000972:	80fb      	strh	r3, [r7, #6]
 8000974:	460b      	mov	r3, r1
 8000976:	80bb      	strh	r3, [r7, #4]
	if(((command & mask) >> shiftNum) == PIN0){
 8000978:	88fa      	ldrh	r2, [r7, #6]
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	4013      	ands	r3, r2
 800097e:	b29b      	uxth	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	fa42 f303 	asr.w	r3, r2, r3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d101      	bne.n	8000990 <getGpioNumber+0x28>
		return GPIO_PIN_0;
 800098c:	2301      	movs	r3, #1
 800098e:	e0bc      	b.n	8000b0a <getGpioNumber+0x1a2>
	}else if(((command & mask)>> shiftNum) == PIN1){
 8000990:	88fa      	ldrh	r2, [r7, #6]
 8000992:	88bb      	ldrh	r3, [r7, #4]
 8000994:	4013      	ands	r3, r2
 8000996:	b29b      	uxth	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	fa42 f303 	asr.w	r3, r2, r3
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d101      	bne.n	80009a8 <getGpioNumber+0x40>
		return GPIO_PIN_1;
 80009a4:	2302      	movs	r3, #2
 80009a6:	e0b0      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN2){
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	4013      	ands	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	fa42 f303 	asr.w	r3, r2, r3
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d101      	bne.n	80009c0 <getGpioNumber+0x58>
 		return GPIO_PIN_2;
 80009bc:	2304      	movs	r3, #4
 80009be:	e0a4      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN3){
 80009c0:	88fa      	ldrh	r2, [r7, #6]
 80009c2:	88bb      	ldrh	r3, [r7, #4]
 80009c4:	4013      	ands	r3, r2
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	fa42 f303 	asr.w	r3, r2, r3
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d101      	bne.n	80009d8 <getGpioNumber+0x70>
 		return GPIO_PIN_3;
 80009d4:	2308      	movs	r3, #8
 80009d6:	e098      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN4){
 80009d8:	88fa      	ldrh	r2, [r7, #6]
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	4013      	ands	r3, r2
 80009de:	b29b      	uxth	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	fa42 f303 	asr.w	r3, r2, r3
 80009e8:	2b05      	cmp	r3, #5
 80009ea:	d101      	bne.n	80009f0 <getGpioNumber+0x88>
 		return GPIO_PIN_4;
 80009ec:	2310      	movs	r3, #16
 80009ee:	e08c      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN5){
 80009f0:	88fa      	ldrh	r2, [r7, #6]
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	4013      	ands	r3, r2
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	fa42 f303 	asr.w	r3, r2, r3
 8000a00:	2b06      	cmp	r3, #6
 8000a02:	d101      	bne.n	8000a08 <getGpioNumber+0xa0>
 		return GPIO_PIN_5;
 8000a04:	2320      	movs	r3, #32
 8000a06:	e080      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN6){
 8000a08:	88fa      	ldrh	r2, [r7, #6]
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	fa42 f303 	asr.w	r3, r2, r3
 8000a18:	2b07      	cmp	r3, #7
 8000a1a:	d101      	bne.n	8000a20 <getGpioNumber+0xb8>
 		return GPIO_PIN_6;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	e074      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN7){
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	88bb      	ldrh	r3, [r7, #4]
 8000a24:	4013      	ands	r3, r2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	fa42 f303 	asr.w	r3, r2, r3
 8000a30:	2b08      	cmp	r3, #8
 8000a32:	d101      	bne.n	8000a38 <getGpioNumber+0xd0>
 		return GPIO_PIN_7;
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	e068      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN8){
 8000a38:	88fa      	ldrh	r2, [r7, #6]
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	fa42 f303 	asr.w	r3, r2, r3
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	d102      	bne.n	8000a52 <getGpioNumber+0xea>
 		return GPIO_PIN_8;
 8000a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a50:	e05b      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN9){
 8000a52:	88fa      	ldrh	r2, [r7, #6]
 8000a54:	88bb      	ldrh	r3, [r7, #4]
 8000a56:	4013      	ands	r3, r2
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	fa42 f303 	asr.w	r3, r2, r3
 8000a62:	2b0a      	cmp	r3, #10
 8000a64:	d102      	bne.n	8000a6c <getGpioNumber+0x104>
 		return GPIO_PIN_9;
 8000a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a6a:	e04e      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN10){
 8000a6c:	88fa      	ldrh	r2, [r7, #6]
 8000a6e:	88bb      	ldrh	r3, [r7, #4]
 8000a70:	4013      	ands	r3, r2
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	461a      	mov	r2, r3
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	fa42 f303 	asr.w	r3, r2, r3
 8000a7c:	2b0b      	cmp	r3, #11
 8000a7e:	d102      	bne.n	8000a86 <getGpioNumber+0x11e>
 		return GPIO_PIN_10;
 8000a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a84:	e041      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN11){
 8000a86:	88fa      	ldrh	r2, [r7, #6]
 8000a88:	88bb      	ldrh	r3, [r7, #4]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	fa42 f303 	asr.w	r3, r2, r3
 8000a96:	2b0c      	cmp	r3, #12
 8000a98:	d102      	bne.n	8000aa0 <getGpioNumber+0x138>
 		return GPIO_PIN_11;
 8000a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a9e:	e034      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN12){
 8000aa0:	88fa      	ldrh	r2, [r7, #6]
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	fa42 f303 	asr.w	r3, r2, r3
 8000ab0:	2b0d      	cmp	r3, #13
 8000ab2:	d102      	bne.n	8000aba <getGpioNumber+0x152>
 		return GPIO_PIN_12;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	e027      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN13){
 8000aba:	88fa      	ldrh	r2, [r7, #6]
 8000abc:	88bb      	ldrh	r3, [r7, #4]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	fa42 f303 	asr.w	r3, r2, r3
 8000aca:	2b0e      	cmp	r3, #14
 8000acc:	d102      	bne.n	8000ad4 <getGpioNumber+0x16c>
 		return GPIO_PIN_13;
 8000ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad2:	e01a      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN14){
 8000ad4:	88fa      	ldrh	r2, [r7, #6]
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	461a      	mov	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	fa42 f303 	asr.w	r3, r2, r3
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d102      	bne.n	8000aee <getGpioNumber+0x186>
 		return GPIO_PIN_14;
 8000ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aec:	e00d      	b.n	8000b0a <getGpioNumber+0x1a2>
 	}else if(((command & mask)>> shiftNum) == PIN15){
 8000aee:	88fa      	ldrh	r2, [r7, #6]
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	4013      	ands	r3, r2
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	fa42 f303 	asr.w	r3, r2, r3
 8000afe:	2b10      	cmp	r3, #16
 8000b00:	d102      	bne.n	8000b08 <getGpioNumber+0x1a0>
 		return GPIO_PIN_15;
 8000b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b06:	e000      	b.n	8000b0a <getGpioNumber+0x1a2>
	}else{
		//unknown set No Pin selected
		return 0x00;
 8000b08:	2300      	movs	r3, #0
	}
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <sendGpiosRegistersState>:

/*
 * send GPIOs Register States over UART to Rasberry Pi
 * Parameter:
 * command: UART received Command */
void sendGpiosRegistersState(uint16_t command){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b090      	sub	sp, #64	; 0x40
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[REGISTERS_STATES_BUFFER_SIZE];
	GPIO_TypeDef * port = getGpioPort(command);
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fdff 	bl	8000728 <getGpioPort>
 8000b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if(port != NULL){
 8000b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d04a      	beq.n	8000bc8 <sendGpiosRegistersState+0xb0>
		size_t bufferOffset = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
		uint32_t modeRgister =  (port->MODER);
 8000b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	61fb      	str	r3, [r7, #28]
		uint32_t oTypeRegister =  (port->OTYPER);
 8000b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	61bb      	str	r3, [r7, #24]
		uint32_t oSpeedRegister =  (port->OSPEEDR);
 8000b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	617b      	str	r3, [r7, #20]
		uint32_t pupdRegister =  (port->PUPDR);
 8000b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	613b      	str	r3, [r7, #16]
		uint32_t idRegister =  (port->IDR);
 8000b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b50:	691b      	ldr	r3, [r3, #16]
 8000b52:	60fb      	str	r3, [r7, #12]
		uint32_t odRegister =  (port->ODR);
 8000b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	69fb      	ldr	r3, [r7, #28]
		memcpy(buffer, &modeRgister, sizeof(uint32_t));
 8000b5c:	623b      	str	r3, [r7, #32]
		bufferOffset += sizeof(uint32_t);
 8000b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b60:	3304      	adds	r3, #4
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
		memcpy(buffer + bufferOffset, &oTypeRegister, sizeof(uint32_t));
 8000b64:	f107 0220 	add.w	r2, r7, #32
 8000b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b6a:	4413      	add	r3, r2
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	601a      	str	r2, [r3, #0]
		bufferOffset += sizeof(uint32_t);
 8000b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b72:	3304      	adds	r3, #4
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
		memcpy(buffer + bufferOffset, &oSpeedRegister, sizeof(uint32_t));
 8000b76:	f107 0220 	add.w	r2, r7, #32
 8000b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b7c:	4413      	add	r3, r2
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	601a      	str	r2, [r3, #0]
		bufferOffset += sizeof(uint32_t);
 8000b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b84:	3304      	adds	r3, #4
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
		memcpy(buffer + bufferOffset, &pupdRegister, sizeof(uint32_t));
 8000b88:	f107 0220 	add.w	r2, r7, #32
 8000b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b8e:	4413      	add	r3, r2
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	601a      	str	r2, [r3, #0]
		bufferOffset += sizeof(uint32_t);
 8000b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b96:	3304      	adds	r3, #4
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
		memcpy(buffer + bufferOffset, &idRegister, sizeof(uint32_t));
 8000b9a:	f107 0220 	add.w	r2, r7, #32
 8000b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba0:	4413      	add	r3, r2
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	601a      	str	r2, [r3, #0]
		bufferOffset += sizeof(uint32_t);
 8000ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba8:	3304      	adds	r3, #4
 8000baa:	63bb      	str	r3, [r7, #56]	; 0x38
		memcpy(buffer + bufferOffset, &odRegister, sizeof(uint32_t));
 8000bac:	f107 0220 	add.w	r2, r7, #32
 8000bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb2:	4413      	add	r3, r2
 8000bb4:	68ba      	ldr	r2, [r7, #8]
 8000bb6:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, buffer, REGISTERS_STATES_BUFFER_SIZE, 10);
 8000bb8:	f107 0120 	add.w	r1, r7, #32
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	2218      	movs	r2, #24
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <sendGpiosRegistersState+0xcc>)
 8000bc2:	f004 fc5b 	bl	800547c <HAL_UART_Transmit>
	}else{
		buffer[0] = 0;
		HAL_UART_Transmit(&huart2, buffer, REGISTERS_STATES_BUFFER_SIZE, 10);
	}
}
 8000bc6:	e009      	b.n	8000bdc <sendGpiosRegistersState+0xc4>
		buffer[0] = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f887 3020 	strb.w	r3, [r7, #32]
		HAL_UART_Transmit(&huart2, buffer, REGISTERS_STATES_BUFFER_SIZE, 10);
 8000bce:	f107 0120 	add.w	r1, r7, #32
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	2218      	movs	r2, #24
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <sendGpiosRegistersState+0xcc>)
 8000bd8:	f004 fc50 	bl	800547c <HAL_UART_Transmit>
}
 8000bdc:	bf00      	nop
 8000bde:	3740      	adds	r7, #64	; 0x40
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000002c 	.word	0x2000002c

08000be8 <getTemperatureSensorValue>:

/*
 * get Temperature Sensor Value
  */
uint16_t getTemperatureSensorValue(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
	ADC_HandleTypeDef hadc  = {};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2250      	movs	r2, #80	; 0x50
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f005 fb03 	bl	8006200 <memset>
	hadc.Instance = ADC1;
 8000bfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bfe:	603b      	str	r3, [r7, #0]
	intialADC(&hadc, ADC_CHANNEL_TEMPSENSOR);
 8000c00:	463b      	mov	r3, r7
 8000c02:	2110      	movs	r1, #16
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fae5 	bl	80001d4 <intialADC>
	 return readAdc(&hadc);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fb3e 	bl	800028e <readAdc>
 8000c12:	4603      	mov	r3, r0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3750      	adds	r7, #80	; 0x50
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <sendAdcValue>:
/*
 * send ADC Value Value over USART 2 to Rasberry Pi
 * Parameter:
 * adcValue: ADC measured voltage
  */
void sendAdcValue(uint16_t adcValue){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
	uint8_t sendBuffer[2];
   	memset(sendBuffer, 0, sizeof(sendBuffer));
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f005 fae6 	bl	8006200 <memset>
	sendBuffer[0] = (uint8_t) (adcValue);
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	733b      	strb	r3, [r7, #12]
	sendBuffer[1] = (uint8_t) (adcValue>>8);
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2, sendBuffer, 2, 10);
 8000c44:	f107 010c 	add.w	r1, r7, #12
 8000c48:	230a      	movs	r3, #10
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <sendAdcValue+0x40>)
 8000c4e:	f004 fc15 	bl	800547c <HAL_UART_Transmit>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000002c 	.word	0x2000002c

08000c60 <readAnalogValue>:

/*
 * read analog pin
 * Parameter:
 * command: UART received Command */
void readAnalogValue(uint16_t command){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0ac      	sub	sp, #176	; 0xb0
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	ADC_HandleTypeDef hadc  = {};
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	2250      	movs	r2, #80	; 0x50
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f005 fac4 	bl	8006200 <memset>
 	uint16_t  gpioNumber = getGpioNumber(command, COMMAND_HANDLE_GPIO_MASK, COMMAND_HANDLE_GPIO_SHIFT);
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fe71 	bl	8000968 <getGpioNumber>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
	GPIO_TypeDef *gpioPort = getGpioPort(command);
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fd4a 	bl	8000728 <getGpioPort>
 8000c94:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	uint16_t adcValue = -1;
 8000c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	if(gpioPort != NULL){
 8000ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 82e7 	beq.w	8001278 <readAnalogValue+0x618>
		if((gpioNumber == GPIO_PIN_5) && (gpioPort == GPIOC)){ //ADC2_IN11
 8000caa:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000cae:	2b20      	cmp	r3, #32
 8000cb0:	d120      	bne.n	8000cf4 <readAnalogValue+0x94>
 8000cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cb6:	4ab9      	ldr	r2, [pc, #740]	; (8000f9c <readAnalogValue+0x33c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d11b      	bne.n	8000cf4 <readAnalogValue+0x94>
			hadc.Instance = ADC2;
 8000cbc:	4bb8      	ldr	r3, [pc, #736]	; (8000fa0 <readAnalogValue+0x340>)
 8000cbe:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_11);
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	210b      	movs	r1, #11
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fa84 	bl	80001d4 <intialADC>
 8000ccc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 			if(adcAck == 1){
 8000cd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d108      	bne.n	8000cea <readAnalogValue+0x8a>
				adcValue = readAdc(&hadc);
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fad6 	bl	800028e <readAdc>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		if((gpioNumber == GPIO_PIN_5) && (gpioPort == GPIOC)){ //ADC2_IN11
 8000ce8:	e2c0      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000cea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cee:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		if((gpioNumber == GPIO_PIN_5) && (gpioPort == GPIOC)){ //ADC2_IN11
 8000cf2:	e2bb      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_12) && (gpioPort == GPIOB)){ //ADC4_IN3
 8000cf4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cfc:	d120      	bne.n	8000d40 <readAnalogValue+0xe0>
 8000cfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d02:	4aa8      	ldr	r2, [pc, #672]	; (8000fa4 <readAnalogValue+0x344>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d11b      	bne.n	8000d40 <readAnalogValue+0xe0>
			hadc.Instance = ADC4;
 8000d08:	4ba7      	ldr	r3, [pc, #668]	; (8000fa8 <readAnalogValue+0x348>)
 8000d0a:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_3);
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	2103      	movs	r1, #3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fa5e 	bl	80001d4 <intialADC>
 8000d18:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 			if(adcAck == 1){
 8000d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d108      	bne.n	8000d36 <readAnalogValue+0xd6>
				adcValue = readAdc(&hadc);
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fab0 	bl	800028e <readAdc>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_12) && (gpioPort == GPIOB)){ //ADC4_IN3
 8000d34:	e29a      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000d3a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_12) && (gpioPort == GPIOB)){ //ADC4_IN3
 8000d3e:	e295      	b.n	800126c <readAnalogValue+0x60c>
			}
		}else if((gpioNumber == GPIO_PIN_11) && (gpioPort == GPIOB)){ //ADC1_IN14
 8000d40:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d48:	d121      	bne.n	8000d8e <readAnalogValue+0x12e>
 8000d4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d4e:	4a95      	ldr	r2, [pc, #596]	; (8000fa4 <readAnalogValue+0x344>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d11c      	bne.n	8000d8e <readAnalogValue+0x12e>
			hadc.Instance = ADC1;
 8000d54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d58:	60bb      	str	r3, [r7, #8]
			int adcAck =intialADC(&hadc, ADC_CHANNEL_14);
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	210e      	movs	r1, #14
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fa37 	bl	80001d4 <intialADC>
 8000d66:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			if(adcAck == 1){
 8000d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d108      	bne.n	8000d84 <readAnalogValue+0x124>
				adcValue = readAdc(&hadc);
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fa89 	bl	800028e <readAdc>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		}else if((gpioNumber == GPIO_PIN_11) && (gpioPort == GPIOB)){ //ADC1_IN14
 8000d82:	e273      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000d88:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		}else if((gpioNumber == GPIO_PIN_11) && (gpioPort == GPIOB)){ //ADC1_IN14
 8000d8c:	e26e      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_2) && (gpioPort == GPIOB)){ //ADC2_IN12
 8000d8e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d120      	bne.n	8000dd8 <readAnalogValue+0x178>
 8000d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d9a:	4a82      	ldr	r2, [pc, #520]	; (8000fa4 <readAnalogValue+0x344>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d11b      	bne.n	8000dd8 <readAnalogValue+0x178>
			hadc.Instance = ADC2;
 8000da0:	4b7f      	ldr	r3, [pc, #508]	; (8000fa0 <readAnalogValue+0x340>)
 8000da2:	60bb      	str	r3, [r7, #8]
			int adcAck =intialADC(&hadc, ADC_CHANNEL_12);
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	210c      	movs	r1, #12
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fa12 	bl	80001d4 <intialADC>
 8000db0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
			if(adcAck == 1){
 8000db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d108      	bne.n	8000dce <readAnalogValue+0x16e>
				adcValue = readAdc(&hadc);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fa64 	bl	800028e <readAdc>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_2) && (gpioPort == GPIOB)){ //ADC2_IN12
 8000dcc:	e24e      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000dce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000dd2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_2) && (gpioPort == GPIOB)){ //ADC2_IN12
 8000dd6:	e249      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_1) && (gpioPort == GPIOB)){ //ADC3_IN1
 8000dd8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d120      	bne.n	8000e22 <readAnalogValue+0x1c2>
 8000de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000de4:	4a6f      	ldr	r2, [pc, #444]	; (8000fa4 <readAnalogValue+0x344>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d11b      	bne.n	8000e22 <readAnalogValue+0x1c2>
			hadc.Instance = ADC3;
 8000dea:	4b70      	ldr	r3, [pc, #448]	; (8000fac <readAnalogValue+0x34c>)
 8000dec:	60bb      	str	r3, [r7, #8]
			int adcAck =intialADC(&hadc, ADC_CHANNEL_1);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2101      	movs	r1, #1
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff f9ed 	bl	80001d4 <intialADC>
 8000dfa:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			if(adcAck == 1){
 8000dfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d108      	bne.n	8000e18 <readAnalogValue+0x1b8>
				adcValue = readAdc(&hadc);
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa3f 	bl	800028e <readAdc>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_1) && (gpioPort == GPIOB)){ //ADC3_IN1
 8000e16:	e229      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000e18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e1c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_1) && (gpioPort == GPIOB)){ //ADC3_IN1
 8000e20:	e224      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_15) && (gpioPort == GPIOB)){ //ADC4_IN5
 8000e22:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e2a:	d120      	bne.n	8000e6e <readAnalogValue+0x20e>
 8000e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e30:	4a5c      	ldr	r2, [pc, #368]	; (8000fa4 <readAnalogValue+0x344>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d11b      	bne.n	8000e6e <readAnalogValue+0x20e>
			hadc.Instance = ADC4;
 8000e36:	4b5c      	ldr	r3, [pc, #368]	; (8000fa8 <readAnalogValue+0x348>)
 8000e38:	60bb      	str	r3, [r7, #8]
			int adcAck =intialADC(&hadc, ADC_CHANNEL_5);
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	2105      	movs	r1, #5
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff f9c7 	bl	80001d4 <intialADC>
 8000e46:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			if(adcAck == 1){
 8000e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d108      	bne.n	8000e64 <readAnalogValue+0x204>
				adcValue = readAdc(&hadc);
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fa19 	bl	800028e <readAdc>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_15) && (gpioPort == GPIOB)){ //ADC4_IN5
 8000e62:	e203      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e68:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_15) && (gpioPort == GPIOB)){ //ADC4_IN5
 8000e6c:	e1fe      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_14) && (gpioPort == GPIOB)){ //ADC4_IN4
 8000e6e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e76:	d120      	bne.n	8000eba <readAnalogValue+0x25a>
 8000e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e7c:	4a49      	ldr	r2, [pc, #292]	; (8000fa4 <readAnalogValue+0x344>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d11b      	bne.n	8000eba <readAnalogValue+0x25a>
			hadc.Instance = ADC4;
 8000e82:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <readAnalogValue+0x348>)
 8000e84:	60bb      	str	r3, [r7, #8]
			int adcAck =intialADC(&hadc, ADC_CHANNEL_4);
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff f9a1 	bl	80001d4 <intialADC>
 8000e92:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			if(adcAck == 1){
 8000e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d108      	bne.n	8000eb0 <readAnalogValue+0x250>
				adcValue = readAdc(&hadc);
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff f9f3 	bl	800028e <readAdc>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_14) && (gpioPort == GPIOB)){ //ADC4_IN4
 8000eae:	e1dd      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000eb4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_14) && (gpioPort == GPIOB)){ //ADC4_IN4
 8000eb8:	e1d8      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_13) && (gpioPort == GPIOB)){ //ADC3_IN5
 8000eba:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ec2:	d120      	bne.n	8000f06 <readAnalogValue+0x2a6>
 8000ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ec8:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <readAnalogValue+0x344>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d11b      	bne.n	8000f06 <readAnalogValue+0x2a6>
			hadc.Instance = ADC3;
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <readAnalogValue+0x34c>)
 8000ed0:	60bb      	str	r3, [r7, #8]
			int adcAck =intialADC(&hadc, ADC_CHANNEL_5);
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	2105      	movs	r1, #5
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff f97b 	bl	80001d4 <intialADC>
 8000ede:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			if(adcAck == 1){
 8000ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d108      	bne.n	8000efc <readAnalogValue+0x29c>
				adcValue = readAdc(&hadc);
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f9cd 	bl	800028e <readAdc>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_13) && (gpioPort == GPIOB)){ //ADC3_IN5
 8000efa:	e1b7      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f00:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_13) && (gpioPort == GPIOB)){ //ADC3_IN5
 8000f04:	e1b2      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_4) && (gpioPort == GPIOC)){ //ADC2_IN5
 8000f06:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000f0a:	2b10      	cmp	r3, #16
 8000f0c:	d120      	bne.n	8000f50 <readAnalogValue+0x2f0>
 8000f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <readAnalogValue+0x33c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d11b      	bne.n	8000f50 <readAnalogValue+0x2f0>
			hadc.Instance = ADC2;
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <readAnalogValue+0x340>)
 8000f1a:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_5);
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	2105      	movs	r1, #5
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff f956 	bl	80001d4 <intialADC>
 8000f28:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			if(adcAck == 1){
 8000f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d108      	bne.n	8000f46 <readAnalogValue+0x2e6>
				adcValue = readAdc(&hadc);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f9a8 	bl	800028e <readAdc>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_4) && (gpioPort == GPIOC)){ //ADC2_IN5
 8000f44:	e192      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f4a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_4) && (gpioPort == GPIOC)){ //ADC2_IN5
 8000f4e:	e18d      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_7) && (gpioPort == GPIOA)){ //ADC2_IN4
 8000f50:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000f54:	2b80      	cmp	r3, #128	; 0x80
 8000f56:	d12b      	bne.n	8000fb0 <readAnalogValue+0x350>
 8000f58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f60:	d126      	bne.n	8000fb0 <readAnalogValue+0x350>
			hadc.Instance = ADC2;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <readAnalogValue+0x340>)
 8000f64:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_4);
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f931 	bl	80001d4 <intialADC>
 8000f72:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			if(adcAck == 1){
 8000f76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d108      	bne.n	8000f90 <readAnalogValue+0x330>
				adcValue = readAdc(&hadc);
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f983 	bl	800028e <readAdc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_7) && (gpioPort == GPIOA)){ //ADC2_IN4
 8000f8e:	e16d      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f94:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_7) && (gpioPort == GPIOA)){ //ADC2_IN4
 8000f98:	e168      	b.n	800126c <readAnalogValue+0x60c>
 8000f9a:	bf00      	nop
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	50000100 	.word	0x50000100
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	50000500 	.word	0x50000500
 8000fac:	50000400 	.word	0x50000400
			}
 		}else if((gpioNumber == GPIO_PIN_6) && (gpioPort == GPIOA)){ //ADC2_IN3
 8000fb0:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000fb4:	2b40      	cmp	r3, #64	; 0x40
 8000fb6:	d11d      	bne.n	8000ff4 <readAnalogValue+0x394>
 8000fb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000fbc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fc0:	d118      	bne.n	8000ff4 <readAnalogValue+0x394>
			hadc.Instance = ADC2;
 8000fc2:	4bb1      	ldr	r3, [pc, #708]	; (8001288 <readAnalogValue+0x628>)
 8000fc4:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_3);
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	2103      	movs	r1, #3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f901 	bl	80001d4 <intialADC>
 8000fd2:	67f8      	str	r0, [r7, #124]	; 0x7c
			if(adcAck == 1){
 8000fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d108      	bne.n	8000fec <readAnalogValue+0x38c>
				adcValue = readAdc(&hadc);
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f955 	bl	800028e <readAdc>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_6) && (gpioPort == GPIOA)){ //ADC2_IN3
 8000fea:	e13f      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8000fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fee:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_6) && (gpioPort == GPIOA)){ //ADC2_IN3
 8000ff2:	e13b      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_5) && (gpioPort == GPIOA)){ //ADC2_IN2
 8000ff4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	d11d      	bne.n	8001038 <readAnalogValue+0x3d8>
 8000ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001000:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001004:	d118      	bne.n	8001038 <readAnalogValue+0x3d8>
			hadc.Instance = ADC2;
 8001006:	4ba0      	ldr	r3, [pc, #640]	; (8001288 <readAnalogValue+0x628>)
 8001008:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_2);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2102      	movs	r1, #2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8df 	bl	80001d4 <intialADC>
 8001016:	67b8      	str	r0, [r7, #120]	; 0x78
			if(adcAck == 1){
 8001018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800101a:	2b01      	cmp	r3, #1
 800101c:	d108      	bne.n	8001030 <readAnalogValue+0x3d0>
				adcValue = readAdc(&hadc);
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f933 	bl	800028e <readAdc>
 8001028:	4603      	mov	r3, r0
 800102a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_5) && (gpioPort == GPIOA)){ //ADC2_IN2
 800102e:	e11d      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8001030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001032:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_5) && (gpioPort == GPIOA)){ //ADC2_IN2
 8001036:	e119      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_0) && (gpioPort == GPIOC)){ //ADC1_IN6
 8001038:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800103c:	2b01      	cmp	r3, #1
 800103e:	d11e      	bne.n	800107e <readAnalogValue+0x41e>
 8001040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001044:	4a91      	ldr	r2, [pc, #580]	; (800128c <readAnalogValue+0x62c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d119      	bne.n	800107e <readAnalogValue+0x41e>
			hadc.Instance = ADC1;
 800104a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800104e:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_6);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2106      	movs	r1, #6
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f8bc 	bl	80001d4 <intialADC>
 800105c:	6778      	str	r0, [r7, #116]	; 0x74
			if(adcAck == 1){
 800105e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001060:	2b01      	cmp	r3, #1
 8001062:	d108      	bne.n	8001076 <readAnalogValue+0x416>
				adcValue = readAdc(&hadc);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f910 	bl	800028e <readAdc>
 800106e:	4603      	mov	r3, r0
 8001070:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_0) && (gpioPort == GPIOC)){ //ADC1_IN6
 8001074:	e0fa      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8001076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001078:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_0) && (gpioPort == GPIOC)){ //ADC1_IN6
 800107c:	e0f6      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_1) && (gpioPort == GPIOC)){ //ADC1_IN7
 800107e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001082:	2b02      	cmp	r3, #2
 8001084:	d11e      	bne.n	80010c4 <readAnalogValue+0x464>
 8001086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800108a:	4a80      	ldr	r2, [pc, #512]	; (800128c <readAnalogValue+0x62c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d119      	bne.n	80010c4 <readAnalogValue+0x464>
			hadc.Instance = ADC1;
 8001090:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001094:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_7);
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2107      	movs	r1, #7
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff f899 	bl	80001d4 <intialADC>
 80010a2:	6738      	str	r0, [r7, #112]	; 0x70
			if(adcAck == 1){
 80010a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d108      	bne.n	80010bc <readAnalogValue+0x45c>
				adcValue = readAdc(&hadc);
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f8ed 	bl	800028e <readAdc>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_1) && (gpioPort == GPIOC)){ //ADC1_IN7
 80010ba:	e0d7      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 80010bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010be:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_1) && (gpioPort == GPIOC)){ //ADC1_IN7
 80010c2:	e0d3      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_0) && (gpioPort == GPIOB)){ //ADC3_IN12
 80010c4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d11d      	bne.n	8001108 <readAnalogValue+0x4a8>
 80010cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010d0:	4a6f      	ldr	r2, [pc, #444]	; (8001290 <readAnalogValue+0x630>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d118      	bne.n	8001108 <readAnalogValue+0x4a8>
			hadc.Instance = ADC3;
 80010d6:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <readAnalogValue+0x634>)
 80010d8:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_12);
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	210c      	movs	r1, #12
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f877 	bl	80001d4 <intialADC>
 80010e6:	66f8      	str	r0, [r7, #108]	; 0x6c
			if(adcAck == 1){
 80010e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <readAnalogValue+0x4a0>
				adcValue = readAdc(&hadc);
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f8cb 	bl	800028e <readAdc>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_0) && (gpioPort == GPIOB)){ //ADC3_IN12
 80010fe:	e0b5      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8001100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001102:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_0) && (gpioPort == GPIOB)){ //ADC3_IN12
 8001106:	e0b1      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_4) && (gpioPort == GPIOA)){ //ADC2_IN1
 8001108:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800110c:	2b10      	cmp	r3, #16
 800110e:	d11d      	bne.n	800114c <readAnalogValue+0x4ec>
 8001110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001114:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001118:	d118      	bne.n	800114c <readAnalogValue+0x4ec>
			hadc.Instance = ADC2;
 800111a:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <readAnalogValue+0x628>)
 800111c:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_1);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f855 	bl	80001d4 <intialADC>
 800112a:	66b8      	str	r0, [r7, #104]	; 0x68
			if(adcAck == 1){
 800112c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <readAnalogValue+0x4e4>
				adcValue = readAdc(&hadc);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f8a9 	bl	800028e <readAdc>
 800113c:	4603      	mov	r3, r0
 800113e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_4) && (gpioPort == GPIOA)){ //ADC2_IN1
 8001142:	e093      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8001144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001146:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_4) && (gpioPort == GPIOA)){ //ADC2_IN1
 800114a:	e08f      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_1) && (gpioPort == GPIOA)){ //ADC1_IN2
 800114c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001150:	2b02      	cmp	r3, #2
 8001152:	d11e      	bne.n	8001192 <readAnalogValue+0x532>
 8001154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001158:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800115c:	d119      	bne.n	8001192 <readAnalogValue+0x532>
			hadc.Instance = ADC1;
 800115e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001162:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_2);
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2102      	movs	r1, #2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f832 	bl	80001d4 <intialADC>
 8001170:	6678      	str	r0, [r7, #100]	; 0x64
			if(adcAck == 1){
 8001172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001174:	2b01      	cmp	r3, #1
 8001176:	d108      	bne.n	800118a <readAnalogValue+0x52a>
				adcValue = readAdc(&hadc);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f886 	bl	800028e <readAdc>
 8001182:	4603      	mov	r3, r0
 8001184:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_1) && (gpioPort == GPIOA)){ //ADC1_IN2
 8001188:	e070      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 800118a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800118c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_1) && (gpioPort == GPIOA)){ //ADC1_IN2
 8001190:	e06c      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_0) && (gpioPort == GPIOA)){ //ADC1_IN1
 8001192:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001196:	2b01      	cmp	r3, #1
 8001198:	d11e      	bne.n	80011d8 <readAnalogValue+0x578>
 800119a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800119e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011a2:	d119      	bne.n	80011d8 <readAnalogValue+0x578>
			hadc.Instance = ADC1;
 80011a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011a8:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_1);
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2101      	movs	r1, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f80f 	bl	80001d4 <intialADC>
 80011b6:	6638      	str	r0, [r7, #96]	; 0x60
			if(adcAck == 1){
 80011b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <readAnalogValue+0x570>
				adcValue = readAdc(&hadc);
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f863 	bl	800028e <readAdc>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_0) && (gpioPort == GPIOA)){ //ADC1_IN1
 80011ce:	e04d      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 80011d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011d2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_0) && (gpioPort == GPIOA)){ //ADC1_IN1
 80011d6:	e049      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_3) && (gpioPort == GPIOC)){ //ADC1_IN9
 80011d8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d11e      	bne.n	800121e <readAnalogValue+0x5be>
 80011e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011e4:	4a29      	ldr	r2, [pc, #164]	; (800128c <readAnalogValue+0x62c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d119      	bne.n	800121e <readAnalogValue+0x5be>
			hadc.Instance = ADC1;
 80011ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011ee:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_9);
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2109      	movs	r1, #9
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7fe ffec 	bl	80001d4 <intialADC>
 80011fc:	65f8      	str	r0, [r7, #92]	; 0x5c
			if(adcAck == 1){
 80011fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001200:	2b01      	cmp	r3, #1
 8001202:	d108      	bne.n	8001216 <readAnalogValue+0x5b6>
				adcValue = readAdc(&hadc);
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f840 	bl	800028e <readAdc>
 800120e:	4603      	mov	r3, r0
 8001210:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_3) && (gpioPort == GPIOC)){ //ADC1_IN9
 8001214:	e02a      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 8001216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001218:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_3) && (gpioPort == GPIOC)){ //ADC1_IN9
 800121c:	e026      	b.n	800126c <readAnalogValue+0x60c>
			}
 		}else if((gpioNumber == GPIO_PIN_2) && (gpioPort == GPIOC)){ //ADC1_IN8
 800121e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001222:	2b04      	cmp	r3, #4
 8001224:	d11e      	bne.n	8001264 <readAnalogValue+0x604>
 8001226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <readAnalogValue+0x62c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d119      	bne.n	8001264 <readAnalogValue+0x604>
			hadc.Instance = ADC1;
 8001230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001234:	60bb      	str	r3, [r7, #8]
			int adcAck = intialADC(&hadc, ADC_CHANNEL_8);
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2108      	movs	r1, #8
 800123c:	4618      	mov	r0, r3
 800123e:	f7fe ffc9 	bl	80001d4 <intialADC>
 8001242:	65b8      	str	r0, [r7, #88]	; 0x58
			if(adcAck == 1){
 8001244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001246:	2b01      	cmp	r3, #1
 8001248:	d108      	bne.n	800125c <readAnalogValue+0x5fc>
				adcValue = readAdc(&hadc);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f81d 	bl	800028e <readAdc>
 8001254:	4603      	mov	r3, r0
 8001256:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_2) && (gpioPort == GPIOC)){ //ADC1_IN8
 800125a:	e007      	b.n	800126c <readAnalogValue+0x60c>
			}else{
				adcValue = adcAck;
 800125c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800125e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 		}else if((gpioNumber == GPIO_PIN_2) && (gpioPort == GPIOC)){ //ADC1_IN8
 8001262:	e003      	b.n	800126c <readAnalogValue+0x60c>
			}
		}else{
			adcValue = UNKNOWN_ADC;
 8001264:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001268:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		}
		sendAdcValue(adcValue);
 800126c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fcd3 	bl	8000c1c <sendAdcValue>
	}else{
		sendAdcValue(UNKNOWN_ADC);
	}
}
 8001276:	e003      	b.n	8001280 <readAnalogValue+0x620>
		sendAdcValue(UNKNOWN_ADC);
 8001278:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800127c:	f7ff fcce 	bl	8000c1c <sendAdcValue>
}
 8001280:	bf00      	nop
 8001282:	37b0      	adds	r7, #176	; 0xb0
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	50000100 	.word	0x50000100
 800128c:	48000800 	.word	0x48000800
 8001290:	48000400 	.word	0x48000400
 8001294:	50000400 	.word	0x50000400

08001298 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
	receivedValue = (huart->pRxBuffPtr[0] << 8) | huart->pRxBuffPtr[1];
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b2:	3301      	adds	r3, #1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_UARTEx_RxEventCallback+0x60>)
 80012c0:	801a      	strh	r2, [r3, #0]
	handleUartCommand(receivedValue);
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_UARTEx_RxEventCallback+0x60>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f80f 	bl	80002ea <handleUartCommand>
  	memset(readBuffer, 0, readBufferSize);
 80012cc:	2202      	movs	r2, #2
 80012ce:	2100      	movs	r1, #0
 80012d0:	480a      	ldr	r0, [pc, #40]	; (80012fc <HAL_UARTEx_RxEventCallback+0x64>)
 80012d2:	f004 ff95 	bl	8006200 <memset>
 	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, readBuffer, readBufferSize);
 80012d6:	2202      	movs	r2, #2
 80012d8:	4908      	ldr	r1, [pc, #32]	; (80012fc <HAL_UARTEx_RxEventCallback+0x64>)
 80012da:	4809      	ldr	r0, [pc, #36]	; (8001300 <HAL_UARTEx_RxEventCallback+0x68>)
 80012dc:	f004 ff17 	bl	800610e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_UARTEx_RxEventCallback+0x6c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_UARTEx_RxEventCallback+0x6c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0204 	bic.w	r2, r2, #4
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200000fa 	.word	0x200000fa
 80012fc:	200000f8 	.word	0x200000f8
 8001300:	2000002c 	.word	0x2000002c
 8001304:	200000b4 	.word	0x200000b4

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130c:	f000 fb6e 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001310:	f000 f81a 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001314:	f000 f8cc 	bl	80014b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001318:	f000 f8ac 	bl	8001474 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800131c:	f000 f87a 	bl	8001414 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*)&receivedValue, 2);
 8001320:	2202      	movs	r2, #2
 8001322:	4906      	ldr	r1, [pc, #24]	; (800133c <main+0x34>)
 8001324:	4806      	ldr	r0, [pc, #24]	; (8001340 <main+0x38>)
 8001326:	f004 fef2 	bl	800610e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <main+0x3c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <main+0x3c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0204 	bic.w	r2, r2, #4
 8001338:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
 800133a:	e7fe      	b.n	800133a <main+0x32>
 800133c:	200000fa 	.word	0x200000fa
 8001340:	2000002c 	.word	0x2000002c
 8001344:	200000b4 	.word	0x200000b4

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0a6      	sub	sp, #152	; 0x98
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001352:	2228      	movs	r2, #40	; 0x28
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f004 ff52 	bl	8006200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2258      	movs	r2, #88	; 0x58
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f004 ff44 	bl	8006200 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001378:	2302      	movs	r3, #2
 800137a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001380:	2310      	movs	r3, #16
 8001382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800138c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001394:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fb72 	bl	8003a90 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013b2:	f000 f8c5 	bl	8001540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	230f      	movs	r3, #15
 80013b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2302      	movs	r3, #2
 80013bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013d0:	2102      	movs	r1, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fbb0 	bl	8004b38 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013de:	f000 f8af 	bl	8001540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80013e2:	f44f 73c1 	mov.w	r3, #386	; 0x182
 80013e6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80013ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80013f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fdd2 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001406:	f000 f89b 	bl	8001540 <Error_Handler>
  }
}
 800140a:	bf00      	nop
 800140c:	3798      	adds	r7, #152	; 0x98
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_USART2_UART_Init+0x58>)
 800141a:	4a15      	ldr	r2, [pc, #84]	; (8001470 <MX_USART2_UART_Init+0x5c>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_USART2_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_USART2_UART_Init+0x58>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_USART2_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001458:	f003 ffc2 	bl	80053e0 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001462:	f000 f86d 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000002c 	.word	0x2000002c
 8001470:	40004400 	.word	0x40004400

08001474 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_DMA_Init+0x38>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <MX_DMA_Init+0x38>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6153      	str	r3, [r2, #20]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_DMA_Init+0x38>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2010      	movs	r0, #16
 8001498:	f001 fcab 	bl	8002df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800149c:	2010      	movs	r0, #16
 800149e:	f001 fcc4 	bl	8002e2a <HAL_NVIC_EnableIRQ>

}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <MX_GPIO_Init+0x8c>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a20      	ldr	r2, [pc, #128]	; (800153c <MX_GPIO_Init+0x8c>)
 80014bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014c0:	6153      	str	r3, [r2, #20]
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_GPIO_Init+0x8c>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_GPIO_Init+0x8c>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a1a      	ldr	r2, [pc, #104]	; (800153c <MX_GPIO_Init+0x8c>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_GPIO_Init+0x8c>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_GPIO_Init+0x8c>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a14      	ldr	r2, [pc, #80]	; (800153c <MX_GPIO_Init+0x8c>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6153      	str	r3, [r2, #20]
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_GPIO_Init+0x8c>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_GPIO_Init+0x8c>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <MX_GPIO_Init+0x8c>)
 8001504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_GPIO_Init+0x8c>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_GPIO_Init+0x8c>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <MX_GPIO_Init+0x8c>)
 800151c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001520:	6153      	str	r3, [r2, #20]
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_GPIO_Init+0x8c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

}
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>
	...

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_MspInit+0x44>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_MspInit+0x44>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_MspInit+0x44>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x44>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x44>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x44>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001582:	2007      	movs	r0, #7
 8001584:	f001 fc2a 	bl	8002ddc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b094      	sub	sp, #80	; 0x50
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b4:	d15f      	bne.n	8001676 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015b6:	4b97      	ldr	r3, [pc, #604]	; (8001814 <HAL_ADC_MspInit+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4a95      	ldr	r2, [pc, #596]	; (8001814 <HAL_ADC_MspInit+0x280>)
 80015be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015c0:	4b94      	ldr	r3, [pc, #592]	; (8001814 <HAL_ADC_MspInit+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10b      	bne.n	80015e0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015c8:	4b93      	ldr	r3, [pc, #588]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	4a92      	ldr	r2, [pc, #584]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6153      	str	r3, [r2, #20]
 80015d4:	4b90      	ldr	r3, [pc, #576]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80015de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e0:	4b8d      	ldr	r3, [pc, #564]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	4a8c      	ldr	r2, [pc, #560]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80015e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015ea:	6153      	str	r3, [r2, #20]
 80015ec:	4b8a      	ldr	r3, [pc, #552]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
 80015f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b87      	ldr	r3, [pc, #540]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	4a86      	ldr	r2, [pc, #536]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80015fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001602:	6153      	str	r3, [r2, #20]
 8001604:	4b84      	ldr	r3, [pc, #528]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b81      	ldr	r3, [pc, #516]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4a80      	ldr	r2, [pc, #512]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161a:	6153      	str	r3, [r2, #20]
 800161c:	4b7e      	ldr	r3, [pc, #504]	; (8001818 <HAL_ADC_MspInit+0x284>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001628:	230f      	movs	r3, #15
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162c:	2303      	movs	r3, #3
 800162e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001634:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001638:	4619      	mov	r1, r3
 800163a:	4878      	ldr	r0, [pc, #480]	; (800181c <HAL_ADC_MspInit+0x288>)
 800163c:	f001 ff9a 	bl	8003574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001640:	2303      	movs	r3, #3
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	2303      	movs	r3, #3
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f001 ff8d 	bl	8003574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800165a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001660:	2303      	movs	r3, #3
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800166c:	4619      	mov	r1, r3
 800166e:	486c      	ldr	r0, [pc, #432]	; (8001820 <HAL_ADC_MspInit+0x28c>)
 8001670:	f001 ff80 	bl	8003574 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001674:	e0ca      	b.n	800180c <HAL_ADC_MspInit+0x278>
  else if(hadc->Instance==ADC2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6a      	ldr	r2, [pc, #424]	; (8001824 <HAL_ADC_MspInit+0x290>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d15e      	bne.n	800173e <HAL_ADC_MspInit+0x1aa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001680:	4b64      	ldr	r3, [pc, #400]	; (8001814 <HAL_ADC_MspInit+0x280>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a63      	ldr	r2, [pc, #396]	; (8001814 <HAL_ADC_MspInit+0x280>)
 8001688:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_ADC_MspInit+0x280>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d10b      	bne.n	80016aa <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001692:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	4a60      	ldr	r2, [pc, #384]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6153      	str	r3, [r2, #20]
 800169e:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4a5a      	ldr	r2, [pc, #360]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016b4:	6153      	str	r3, [r2, #20]
 80016b6:	4b58      	ldr	r3, [pc, #352]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b55      	ldr	r3, [pc, #340]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a54      	ldr	r2, [pc, #336]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	6153      	str	r3, [r2, #20]
 80016ce:	4b52      	ldr	r3, [pc, #328]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a4e      	ldr	r2, [pc, #312]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e4:	6153      	str	r3, [r2, #20]
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 80016f2:	2334      	movs	r3, #52	; 0x34
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001702:	4619      	mov	r1, r3
 8001704:	4845      	ldr	r0, [pc, #276]	; (800181c <HAL_ADC_MspInit+0x288>)
 8001706:	f001 ff35 	bl	8003574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800170a:	23f0      	movs	r3, #240	; 0xf0
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170e:	2303      	movs	r3, #3
 8001710:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001720:	f001 ff28 	bl	8003574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001724:	2304      	movs	r3, #4
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001728:	2303      	movs	r3, #3
 800172a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001734:	4619      	mov	r1, r3
 8001736:	483a      	ldr	r0, [pc, #232]	; (8001820 <HAL_ADC_MspInit+0x28c>)
 8001738:	f001 ff1c 	bl	8003574 <HAL_GPIO_Init>
}
 800173c:	e066      	b.n	800180c <HAL_ADC_MspInit+0x278>
  else if(hadc->Instance==ADC3)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a39      	ldr	r2, [pc, #228]	; (8001828 <HAL_ADC_MspInit+0x294>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d12e      	bne.n	80017a6 <HAL_ADC_MspInit+0x212>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_ADC_MspInit+0x298>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	4a37      	ldr	r2, [pc, #220]	; (800182c <HAL_ADC_MspInit+0x298>)
 8001750:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001752:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_ADC_MspInit+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d10b      	bne.n	8001772 <HAL_ADC_MspInit+0x1de>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800175a:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <HAL_ADC_MspInit+0x284>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800176e:	61bb      	str	r3, [r7, #24]
 8001770:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	4a28      	ldr	r2, [pc, #160]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6153      	str	r3, [r2, #20]
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <HAL_ADC_MspInit+0x284>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 800178a:	f242 0303 	movw	r3, #8195	; 0x2003
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001790:	2303      	movs	r3, #3
 8001792:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800179c:	4619      	mov	r1, r3
 800179e:	4820      	ldr	r0, [pc, #128]	; (8001820 <HAL_ADC_MspInit+0x28c>)
 80017a0:	f001 fee8 	bl	8003574 <HAL_GPIO_Init>
}
 80017a4:	e032      	b.n	800180c <HAL_ADC_MspInit+0x278>
  else if(hadc->Instance==ADC4)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a21      	ldr	r2, [pc, #132]	; (8001830 <HAL_ADC_MspInit+0x29c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d12d      	bne.n	800180c <HAL_ADC_MspInit+0x278>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_ADC_MspInit+0x298>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_ADC_MspInit+0x298>)
 80017b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_ADC_MspInit+0x298>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10b      	bne.n	80017da <HAL_ADC_MspInit+0x246>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80017c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017cc:	6153      	str	r3, [r2, #20]
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80017e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e4:	6153      	str	r3, [r2, #20]
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_ADC_MspInit+0x284>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80017f2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f8:	2303      	movs	r3, #3
 80017fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <HAL_ADC_MspInit+0x28c>)
 8001808:	f001 feb4 	bl	8003574 <HAL_GPIO_Init>
}
 800180c:	bf00      	nop
 800180e:	3750      	adds	r7, #80	; 0x50
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200000fc 	.word	0x200000fc
 8001818:	40021000 	.word	0x40021000
 800181c:	48000800 	.word	0x48000800
 8001820:	48000400 	.word	0x48000400
 8001824:	50000100 	.word	0x50000100
 8001828:	50000400 	.word	0x50000400
 800182c:	20000100 	.word	0x20000100
 8001830:	50000500 	.word	0x50000500

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <HAL_UART_MspInit+0xc8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d14e      	bne.n	80018f4 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_UART_MspInit+0xcc>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a29      	ldr	r2, [pc, #164]	; (8001900 <HAL_UART_MspInit+0xcc>)
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_UART_MspInit+0xcc>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_UART_MspInit+0xcc>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_UART_MspInit+0xcc>)
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	6153      	str	r3, [r2, #20]
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_UART_MspInit+0xcc>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001886:	230c      	movs	r3, #12
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001896:	2307      	movs	r3, #7
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f001 fe66 	bl	8003574 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_UART_MspInit+0xd4>)
 80018ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018da:	f001 fac0 	bl	8002e5e <HAL_DMA_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80018e4:	f7ff fe2c 	bl	8001540 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018ec:	675a      	str	r2, [r3, #116]	; 0x74
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <HAL_UART_MspInit+0xd0>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40004400 	.word	0x40004400
 8001900:	40021000 	.word	0x40021000
 8001904:	200000b4 	.word	0x200000b4
 8001908:	4002006c 	.word	0x4002006c

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 f88e 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <DMA1_Channel6_IRQHandler+0x10>)
 8001966:	f001 fb20 	bl	8002faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200000b4 	.word	0x200000b4

08001974 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800199c:	f7ff ffea 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019a2:	490d      	ldr	r1, [pc, #52]	; (80019d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <LoopForever+0xe>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019b8:	4c0a      	ldr	r4, [pc, #40]	; (80019e4 <LoopForever+0x16>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c6:	f004 fbf7 	bl	80061b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ca:	f7ff fc9d 	bl	8001308 <main>

080019ce <LoopForever>:

LoopForever:
    b LoopForever
 80019ce:	e7fe      	b.n	80019ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019dc:	08006268 	.word	0x08006268
  ldr r2, =_sbss
 80019e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019e4:	20000128 	.word	0x20000128

080019e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_2_IRQHandler>
	...

080019ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x28>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x28>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f001 f9ed 	bl	8002ddc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fda0 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000

08001a18 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fa05 	bl	8002e46 <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f001 f9cd 	bl	8002df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	20000104 	.word	0x20000104

08001aa0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000104 	.word	0x20000104

08001ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b09a      	sub	sp, #104	; 0x68
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e1e3      	b.n	8001ea0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d176      	bne.n	8001bd8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d152      	bne.n	8001b98 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fd41 	bl	8001594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d13b      	bne.n	8001b98 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 ff6f 	bl	8002a04 <ADC_Disable>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d12f      	bne.n	8001b98 <HAL_ADC_Init+0xe0>
 8001b38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d12b      	bne.n	8001b98 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b48:	f023 0302 	bic.w	r3, r3, #2
 8001b4c:	f043 0202 	orr.w	r2, r3, #2
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b62:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b72:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b74:	4b92      	ldr	r3, [pc, #584]	; (8001dc0 <HAL_ADC_Init+0x308>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a92      	ldr	r2, [pc, #584]	; (8001dc4 <HAL_ADC_Init+0x30c>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9a      	lsrs	r2, r3, #18
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b8a:	e002      	b.n	8001b92 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f9      	bne.n	8001b8c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb4:	d110      	bne.n	8001bd8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f023 0312 	bic.w	r3, r3, #18
 8001bbe:	f043 0210 	orr.w	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f040 8150 	bne.w	8001e86 <HAL_ADC_Init+0x3ce>
 8001be6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 814b 	bne.w	8001e86 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 8143 	bne.w	8001e86 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c08:	f043 0202 	orr.w	r2, r3, #2
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c18:	d004      	beq.n	8001c24 <HAL_ADC_Init+0x16c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_ADC_Init+0x310>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_Init+0x170>
 8001c24:	4b69      	ldr	r3, [pc, #420]	; (8001dcc <HAL_ADC_Init+0x314>)
 8001c26:	e000      	b.n	8001c2a <HAL_ADC_Init+0x172>
 8001c28:	4b69      	ldr	r3, [pc, #420]	; (8001dd0 <HAL_ADC_Init+0x318>)
 8001c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c34:	d102      	bne.n	8001c3c <HAL_ADC_Init+0x184>
 8001c36:	4b64      	ldr	r3, [pc, #400]	; (8001dc8 <HAL_ADC_Init+0x310>)
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	e01a      	b.n	8001c72 <HAL_ADC_Init+0x1ba>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a61      	ldr	r2, [pc, #388]	; (8001dc8 <HAL_ADC_Init+0x310>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d103      	bne.n	8001c4e <HAL_ADC_Init+0x196>
 8001c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e011      	b.n	8001c72 <HAL_ADC_Init+0x1ba>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <HAL_ADC_Init+0x31c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d102      	bne.n	8001c5e <HAL_ADC_Init+0x1a6>
 8001c58:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_ADC_Init+0x320>)
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e009      	b.n	8001c72 <HAL_ADC_Init+0x1ba>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a5d      	ldr	r2, [pc, #372]	; (8001dd8 <HAL_ADC_Init+0x320>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d102      	bne.n	8001c6e <HAL_ADC_Init+0x1b6>
 8001c68:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <HAL_ADC_Init+0x31c>)
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e001      	b.n	8001c72 <HAL_ADC_Init+0x1ba>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d108      	bne.n	8001c92 <HAL_ADC_Init+0x1da>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_Init+0x1da>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_ADC_Init+0x1dc>
 8001c92:	2300      	movs	r3, #0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11c      	bne.n	8001cd2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d010      	beq.n	8001cc0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_ADC_Init+0x202>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Init+0x202>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_ADC_Init+0x204>
 8001cba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d108      	bne.n	8001cd2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7e5b      	ldrb	r3, [r3, #25]
 8001cd6:	035b      	lsls	r3, r3, #13
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cdc:	2a01      	cmp	r2, #1
 8001cde:	d002      	beq.n	8001ce6 <HAL_ADC_Init+0x22e>
 8001ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADC_Init+0x230>
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d11b      	bne.n	8001d3e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7e5b      	ldrb	r3, [r3, #25]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	3b01      	subs	r3, #1
 8001d14:	045a      	lsls	r2, r3, #17
 8001d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8001d20:	e00d      	b.n	8001d3e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d2a:	f043 0220 	orr.w	r2, r3, #32
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d054      	beq.n	8001df0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_ADC_Init+0x31c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d004      	beq.n	8001d5a <HAL_ADC_Init+0x2a2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <HAL_ADC_Init+0x320>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d140      	bne.n	8001ddc <HAL_ADC_Init+0x324>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001d62:	d02a      	beq.n	8001dba <HAL_ADC_Init+0x302>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6c:	d022      	beq.n	8001db4 <HAL_ADC_Init+0x2fc>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001d76:	d01a      	beq.n	8001dae <HAL_ADC_Init+0x2f6>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001d80:	d012      	beq.n	8001da8 <HAL_ADC_Init+0x2f0>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001d8a:	d00a      	beq.n	8001da2 <HAL_ADC_Init+0x2ea>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001d94:	d002      	beq.n	8001d9c <HAL_ADC_Init+0x2e4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	e023      	b.n	8001de4 <HAL_ADC_Init+0x32c>
 8001d9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001da0:	e020      	b.n	8001de4 <HAL_ADC_Init+0x32c>
 8001da2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001da6:	e01d      	b.n	8001de4 <HAL_ADC_Init+0x32c>
 8001da8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001dac:	e01a      	b.n	8001de4 <HAL_ADC_Init+0x32c>
 8001dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db2:	e017      	b.n	8001de4 <HAL_ADC_Init+0x32c>
 8001db4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001db8:	e014      	b.n	8001de4 <HAL_ADC_Init+0x32c>
 8001dba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001dbe:	e011      	b.n	8001de4 <HAL_ADC_Init+0x32c>
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	431bde83 	.word	0x431bde83
 8001dc8:	50000100 	.word	0x50000100
 8001dcc:	50000300 	.word	0x50000300
 8001dd0:	50000700 	.word	0x50000700
 8001dd4:	50000400 	.word	0x50000400
 8001dd8:	50000500 	.word	0x50000500
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001de8:	4313      	orrs	r3, r2
 8001dea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dec:	4313      	orrs	r3, r2
 8001dee:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d114      	bne.n	8001e28 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e0c:	f023 0302 	bic.w	r3, r3, #2
 8001e10:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7e1b      	ldrb	r3, [r3, #24]
 8001e16:	039a      	lsls	r2, r3, #14
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4313      	orrs	r3, r2
 8001e22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e24:	4313      	orrs	r3, r2
 8001e26:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_ADC_Init+0x3f0>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10c      	bne.n	8001e5e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f023 010f 	bic.w	r1, r3, #15
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e5c:	e007      	b.n	8001e6e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 020f 	bic.w	r2, r2, #15
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f023 0303 	bic.w	r3, r3, #3
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
 8001e84:	e00a      	b.n	8001e9c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f023 0312 	bic.w	r3, r3, #18
 8001e8e:	f043 0210 	orr.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3768      	adds	r7, #104	; 0x68
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	fff0c007 	.word	0xfff0c007

08001eac <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 80f9 	bne.w	80020ba <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_Start+0x2a>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e0f4      	b.n	80020c0 <HAL_ADC_Start+0x214>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fd2c 	bl	800293c <ADC_Enable>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 80e0 	bne.w	80020b0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f0c:	d004      	beq.n	8001f18 <HAL_ADC_Start+0x6c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6d      	ldr	r2, [pc, #436]	; (80020c8 <HAL_ADC_Start+0x21c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d106      	bne.n	8001f26 <HAL_ADC_Start+0x7a>
 8001f18:	4b6c      	ldr	r3, [pc, #432]	; (80020cc <HAL_ADC_Start+0x220>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_ADC_Start+0x9a>
 8001f24:	e005      	b.n	8001f32 <HAL_ADC_Start+0x86>
 8001f26:	4b6a      	ldr	r3, [pc, #424]	; (80020d0 <HAL_ADC_Start+0x224>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_ADC_Start+0x9a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f3a:	d004      	beq.n	8001f46 <HAL_ADC_Start+0x9a>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a64      	ldr	r2, [pc, #400]	; (80020d4 <HAL_ADC_Start+0x228>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d115      	bne.n	8001f72 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d036      	beq.n	8001fce <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f70:	e02d      	b.n	8001fce <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f86:	d004      	beq.n	8001f92 <HAL_ADC_Start+0xe6>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a4e      	ldr	r2, [pc, #312]	; (80020c8 <HAL_ADC_Start+0x21c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10a      	bne.n	8001fa8 <HAL_ADC_Start+0xfc>
 8001f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e008      	b.n	8001fba <HAL_ADC_Start+0x10e>
 8001fa8:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_ADC_Start+0x228>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fda:	d106      	bne.n	8001fea <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f023 0206 	bic.w	r2, r3, #6
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44
 8001fe8:	e002      	b.n	8001ff0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	221c      	movs	r2, #28
 8001ffe:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002008:	d004      	beq.n	8002014 <HAL_ADC_Start+0x168>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2e      	ldr	r2, [pc, #184]	; (80020c8 <HAL_ADC_Start+0x21c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d106      	bne.n	8002022 <HAL_ADC_Start+0x176>
 8002014:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <HAL_ADC_Start+0x220>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	2b00      	cmp	r3, #0
 800201e:	d03e      	beq.n	800209e <HAL_ADC_Start+0x1f2>
 8002020:	e005      	b.n	800202e <HAL_ADC_Start+0x182>
 8002022:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_ADC_Start+0x224>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2b00      	cmp	r3, #0
 800202c:	d037      	beq.n	800209e <HAL_ADC_Start+0x1f2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002036:	d004      	beq.n	8002042 <HAL_ADC_Start+0x196>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <HAL_ADC_Start+0x21c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d106      	bne.n	8002050 <HAL_ADC_Start+0x1a4>
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <HAL_ADC_Start+0x220>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2b05      	cmp	r3, #5
 800204c:	d027      	beq.n	800209e <HAL_ADC_Start+0x1f2>
 800204e:	e005      	b.n	800205c <HAL_ADC_Start+0x1b0>
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_ADC_Start+0x224>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	2b05      	cmp	r3, #5
 800205a:	d020      	beq.n	800209e <HAL_ADC_Start+0x1f2>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002064:	d004      	beq.n	8002070 <HAL_ADC_Start+0x1c4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_ADC_Start+0x21c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d106      	bne.n	800207e <HAL_ADC_Start+0x1d2>
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_ADC_Start+0x220>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	2b09      	cmp	r3, #9
 800207a:	d010      	beq.n	800209e <HAL_ADC_Start+0x1f2>
 800207c:	e005      	b.n	800208a <HAL_ADC_Start+0x1de>
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_ADC_Start+0x224>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2b09      	cmp	r3, #9
 8002088:	d009      	beq.n	800209e <HAL_ADC_Start+0x1f2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002092:	d004      	beq.n	800209e <HAL_ADC_Start+0x1f2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_ADC_Start+0x228>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10f      	bne.n	80020be <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0204 	orr.w	r2, r2, #4
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	e006      	b.n	80020be <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80020b8:	e001      	b.n	80020be <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020ba:	2302      	movs	r3, #2
 80020bc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	50000100 	.word	0x50000100
 80020cc:	50000300 	.word	0x50000300
 80020d0:	50000700 	.word	0x50000700
 80020d4:	50000400 	.word	0x50000400

080020d8 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_Stop+0x1a>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e023      	b.n	800213a <HAL_ADC_Stop+0x62>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80020fa:	216c      	movs	r1, #108	; 0x6c
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fce7 	bl	8002ad0 <ADC_ConversionStop>
 8002102:	4603      	mov	r3, r0
 8002104:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d111      	bne.n	8002130 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fc79 	bl	8002a04 <ADC_Disable>
 8002112:	4603      	mov	r3, r0
 8002114:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b08      	cmp	r3, #8
 8002158:	d102      	bne.n	8002160 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800215a:	2308      	movs	r3, #8
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e03a      	b.n	80021d6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002168:	d004      	beq.n	8002174 <HAL_ADC_PollForConversion+0x30>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a72      	ldr	r2, [pc, #456]	; (8002338 <HAL_ADC_PollForConversion+0x1f4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_ADC_PollForConversion+0x34>
 8002174:	4b71      	ldr	r3, [pc, #452]	; (800233c <HAL_ADC_PollForConversion+0x1f8>)
 8002176:	e000      	b.n	800217a <HAL_ADC_PollForConversion+0x36>
 8002178:	4b71      	ldr	r3, [pc, #452]	; (8002340 <HAL_ADC_PollForConversion+0x1fc>)
 800217a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2b00      	cmp	r3, #0
 8002186:	d112      	bne.n	80021ae <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d11d      	bne.n	80021d2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f043 0220 	orr.w	r2, r3, #32
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0bf      	b.n	800232e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0ad      	b.n	800232e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80021d2:	230c      	movs	r3, #12
 80021d4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021de:	d004      	beq.n	80021ea <HAL_ADC_PollForConversion+0xa6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a54      	ldr	r2, [pc, #336]	; (8002338 <HAL_ADC_PollForConversion+0x1f4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d106      	bne.n	80021f8 <HAL_ADC_PollForConversion+0xb4>
 80021ea:	4b54      	ldr	r3, [pc, #336]	; (800233c <HAL_ADC_PollForConversion+0x1f8>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d010      	beq.n	8002218 <HAL_ADC_PollForConversion+0xd4>
 80021f6:	e005      	b.n	8002204 <HAL_ADC_PollForConversion+0xc0>
 80021f8:	4b51      	ldr	r3, [pc, #324]	; (8002340 <HAL_ADC_PollForConversion+0x1fc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <HAL_ADC_PollForConversion+0xd4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800220c:	d004      	beq.n	8002218 <HAL_ADC_PollForConversion+0xd4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <HAL_ADC_PollForConversion+0x200>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d104      	bne.n	8002222 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e00f      	b.n	8002242 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800222a:	d004      	beq.n	8002236 <HAL_ADC_PollForConversion+0xf2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a41      	ldr	r2, [pc, #260]	; (8002338 <HAL_ADC_PollForConversion+0x1f4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d102      	bne.n	800223c <HAL_ADC_PollForConversion+0xf8>
 8002236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800223a:	e000      	b.n	800223e <HAL_ADC_PollForConversion+0xfa>
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_ADC_PollForConversion+0x200>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002242:	f7ff fc2d 	bl	8001aa0 <HAL_GetTick>
 8002246:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002248:	e021      	b.n	800228e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d01d      	beq.n	800228e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_ADC_PollForConversion+0x124>
 8002258:	f7ff fc22 	bl	8001aa0 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d212      	bcs.n	800228e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10b      	bne.n	800228e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f043 0204 	orr.w	r2, r3, #4
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e04f      	b.n	800232e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0d6      	beq.n	800224a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d131      	bne.n	800231a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d12c      	bne.n	800231a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d125      	bne.n	800231a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d112      	bne.n	8002302 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d112      	bne.n	800231a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002300:	e00b      	b.n	800231a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f043 0220 	orr.w	r2, r3, #32
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d103      	bne.n	800232c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	50000100 	.word	0x50000100
 800233c:	50000300 	.word	0x50000300
 8002340:	50000700 	.word	0x50000700
 8002344:	50000400 	.word	0x50000400

08002348 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002364:	b480      	push	{r7}
 8002366:	b09b      	sub	sp, #108	; 0x6c
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x22>
 8002382:	2302      	movs	r3, #2
 8002384:	e2ca      	b.n	800291c <HAL_ADC_ConfigChannel+0x5b8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 82ae 	bne.w	80028fa <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d81c      	bhi.n	80023e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	461a      	mov	r2, r3
 80023ba:	231f      	movs	r3, #31
 80023bc:	4093      	lsls	r3, r2
 80023be:	43db      	mvns	r3, r3
 80023c0:	4019      	ands	r1, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa00 f203 	lsl.w	r2, r0, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
 80023de:	e063      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b09      	cmp	r3, #9
 80023e6:	d81e      	bhi.n	8002426 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	3b1e      	subs	r3, #30
 80023fc:	221f      	movs	r2, #31
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	4019      	ands	r1, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	3b1e      	subs	r3, #30
 8002418:	fa00 f203 	lsl.w	r2, r0, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	635a      	str	r2, [r3, #52]	; 0x34
 8002424:	e040      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b0e      	cmp	r3, #14
 800242c:	d81e      	bhi.n	800246c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	3b3c      	subs	r3, #60	; 0x3c
 8002442:	221f      	movs	r2, #31
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	4019      	ands	r1, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	3b3c      	subs	r3, #60	; 0x3c
 800245e:	fa00 f203 	lsl.w	r2, r0, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
 800246a:	e01d      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	3b5a      	subs	r3, #90	; 0x5a
 8002480:	221f      	movs	r2, #31
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	4019      	ands	r1, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	3b5a      	subs	r3, #90	; 0x5a
 800249c:	fa00 f203 	lsl.w	r2, r0, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 80e5 	bne.w	8002682 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	d91c      	bls.n	80024fa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6999      	ldr	r1, [r3, #24]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	3b1e      	subs	r3, #30
 80024d2:	2207      	movs	r2, #7
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	4019      	ands	r1, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6898      	ldr	r0, [r3, #8]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	fa00 f203 	lsl.w	r2, r0, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	e019      	b.n	800252e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6959      	ldr	r1, [r3, #20]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	2207      	movs	r2, #7
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	4019      	ands	r1, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6898      	ldr	r0, [r3, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	fa00 f203 	lsl.w	r2, r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	3b01      	subs	r3, #1
 800254c:	2b03      	cmp	r3, #3
 800254e:	d84f      	bhi.n	80025f0 <HAL_ADC_ConfigChannel+0x28c>
 8002550:	a201      	add	r2, pc, #4	; (adr r2, 8002558 <HAL_ADC_ConfigChannel+0x1f4>)
 8002552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002556:	bf00      	nop
 8002558:	08002569 	.word	0x08002569
 800255c:	0800258b 	.word	0x0800258b
 8002560:	080025ad 	.word	0x080025ad
 8002564:	080025cf 	.word	0x080025cf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800256e:	4b9a      	ldr	r3, [pc, #616]	; (80027d8 <HAL_ADC_ConfigChannel+0x474>)
 8002570:	4013      	ands	r3, r2
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	0691      	lsls	r1, r2, #26
 8002578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800257a:	430a      	orrs	r2, r1
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002586:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002588:	e07e      	b.n	8002688 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002590:	4b91      	ldr	r3, [pc, #580]	; (80027d8 <HAL_ADC_ConfigChannel+0x474>)
 8002592:	4013      	ands	r3, r2
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	0691      	lsls	r1, r2, #26
 800259a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800259c:	430a      	orrs	r2, r1
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025a8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025aa:	e06d      	b.n	8002688 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80025b2:	4b89      	ldr	r3, [pc, #548]	; (80027d8 <HAL_ADC_ConfigChannel+0x474>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	0691      	lsls	r1, r2, #26
 80025bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025be:	430a      	orrs	r2, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025ca:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025cc:	e05c      	b.n	8002688 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025d4:	4b80      	ldr	r3, [pc, #512]	; (80027d8 <HAL_ADC_ConfigChannel+0x474>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	0691      	lsls	r1, r2, #26
 80025de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025e0:	430a      	orrs	r2, r1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025ec:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025ee:	e04b      	b.n	8002688 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	069b      	lsls	r3, r3, #26
 8002600:	429a      	cmp	r2, r3
 8002602:	d107      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002612:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800261a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	069b      	lsls	r3, r3, #26
 8002624:	429a      	cmp	r2, r3
 8002626:	d107      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002636:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800263e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	069b      	lsls	r3, r3, #26
 8002648:	429a      	cmp	r2, r3
 800264a:	d107      	bne.n	800265c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800265a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002662:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	069b      	lsls	r3, r3, #26
 800266c:	429a      	cmp	r2, r3
 800266e:	d10a      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800267e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002680:	e001      	b.n	8002686 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002682:	bf00      	nop
 8002684:	e000      	b.n	8002688 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002686:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d108      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x344>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x344>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_ADC_ConfigChannel+0x346>
 80026a8:	2300      	movs	r3, #0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 8130 	bne.w	8002910 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d00f      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	400a      	ands	r2, r1
 80026d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80026d6:	e049      	b.n	800276c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	409a      	lsls	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	d91c      	bls.n	8002734 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6999      	ldr	r1, [r3, #24]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	3b1b      	subs	r3, #27
 800270c:	2207      	movs	r2, #7
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	4019      	ands	r1, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6898      	ldr	r0, [r3, #8]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	3b1b      	subs	r3, #27
 8002726:	fa00 f203 	lsl.w	r2, r0, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	619a      	str	r2, [r3, #24]
 8002732:	e01b      	b.n	800276c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6959      	ldr	r1, [r3, #20]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	2207      	movs	r2, #7
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	4019      	ands	r1, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6898      	ldr	r0, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	fa00 f203 	lsl.w	r2, r0, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002774:	d004      	beq.n	8002780 <HAL_ADC_ConfigChannel+0x41c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a18      	ldr	r2, [pc, #96]	; (80027dc <HAL_ADC_ConfigChannel+0x478>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x420>
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <HAL_ADC_ConfigChannel+0x47c>)
 8002782:	e000      	b.n	8002786 <HAL_ADC_ConfigChannel+0x422>
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_ADC_ConfigChannel+0x480>)
 8002786:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b10      	cmp	r3, #16
 800278e:	d105      	bne.n	800279c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80027a0:	2b11      	cmp	r3, #17
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80027a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80027b4:	2b12      	cmp	r3, #18
 80027b6:	f040 80ab 	bne.w	8002910 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80027ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 80a4 	bne.w	8002910 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027d0:	d10a      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x484>
 80027d2:	4b02      	ldr	r3, [pc, #8]	; (80027dc <HAL_ADC_ConfigChannel+0x478>)
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e022      	b.n	800281e <HAL_ADC_ConfigChannel+0x4ba>
 80027d8:	83fff000 	.word	0x83fff000
 80027dc:	50000100 	.word	0x50000100
 80027e0:	50000300 	.word	0x50000300
 80027e4:	50000700 	.word	0x50000700
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a4e      	ldr	r2, [pc, #312]	; (8002928 <HAL_ADC_ConfigChannel+0x5c4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d103      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x496>
 80027f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e011      	b.n	800281e <HAL_ADC_ConfigChannel+0x4ba>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a4b      	ldr	r2, [pc, #300]	; (800292c <HAL_ADC_ConfigChannel+0x5c8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d102      	bne.n	800280a <HAL_ADC_ConfigChannel+0x4a6>
 8002804:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <HAL_ADC_ConfigChannel+0x5cc>)
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e009      	b.n	800281e <HAL_ADC_ConfigChannel+0x4ba>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_ADC_ConfigChannel+0x5cc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d102      	bne.n	800281a <HAL_ADC_ConfigChannel+0x4b6>
 8002814:	4b45      	ldr	r3, [pc, #276]	; (800292c <HAL_ADC_ConfigChannel+0x5c8>)
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e001      	b.n	800281e <HAL_ADC_ConfigChannel+0x4ba>
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d108      	bne.n	800283e <HAL_ADC_ConfigChannel+0x4da>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x4da>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_ADC_ConfigChannel+0x4dc>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d150      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002844:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002846:	2b00      	cmp	r3, #0
 8002848:	d010      	beq.n	800286c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x502>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x502>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_ADC_ConfigChannel+0x504>
 8002866:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002868:	2b00      	cmp	r3, #0
 800286a:	d13c      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b10      	cmp	r3, #16
 8002872:	d11d      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x54c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287c:	d118      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800287e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002888:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800288a:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_ADC_ConfigChannel+0x5d0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <HAL_ADC_ConfigChannel+0x5d4>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	0c9a      	lsrs	r2, r3, #18
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a0:	e002      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f9      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028ae:	e02e      	b.n	800290e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b11      	cmp	r3, #17
 80028b6:	d10b      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x56c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c0:	d106      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80028c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80028ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028cc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028ce:	e01e      	b.n	800290e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b12      	cmp	r3, #18
 80028d6:	d11a      	bne.n	800290e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80028d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028e4:	e013      	b.n	800290e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028f8:	e00a      	b.n	8002910 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800290c:	e000      	b.n	8002910 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800290e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002918:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800291c:	4618      	mov	r0, r3
 800291e:	376c      	adds	r7, #108	; 0x6c
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	50000100 	.word	0x50000100
 800292c:	50000400 	.word	0x50000400
 8002930:	50000500 	.word	0x50000500
 8002934:	20000000 	.word	0x20000000
 8002938:	431bde83 	.word	0x431bde83

0800293c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <ADC_Enable+0x2c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <ADC_Enable+0x2c>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <ADC_Enable+0x2e>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d143      	bne.n	80029f6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <ADC_Enable+0xc4>)
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f043 0210 	orr.w	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e02f      	b.n	80029f8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80029a8:	f7ff f87a 	bl	8001aa0 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029ae:	e01b      	b.n	80029e8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029b0:	f7ff f876 	bl	8001aa0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d914      	bls.n	80029e8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d00d      	beq.n	80029e8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f043 0210 	orr.w	r2, r3, #16
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	f043 0201 	orr.w	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e007      	b.n	80029f8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d1dc      	bne.n	80029b0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	8000003f 	.word	0x8000003f

08002a04 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <ADC_Disable+0x2c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <ADC_Disable+0x2c>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <ADC_Disable+0x2e>
 8002a30:	2300      	movs	r3, #0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d047      	beq.n	8002ac6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030d 	and.w	r3, r3, #13
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10f      	bne.n	8002a64 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0202 	orr.w	r2, r2, #2
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a5c:	f7ff f820 	bl	8001aa0 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a62:	e029      	b.n	8002ab8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f043 0210 	orr.w	r2, r3, #16
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e023      	b.n	8002ac8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a80:	f7ff f80e 	bl	8001aa0 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d914      	bls.n	8002ab8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10d      	bne.n	8002ab8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0210 	orr.w	r2, r3, #16
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e007      	b.n	8002ac8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d0dc      	beq.n	8002a80 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 809b 	beq.w	8002c2c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b04:	d12a      	bne.n	8002b5c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d126      	bne.n	8002b5c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d122      	bne.n	8002b5c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002b16:	230c      	movs	r3, #12
 8002b18:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002b1a:	e014      	b.n	8002b46 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4a46      	ldr	r2, [pc, #280]	; (8002c38 <ADC_ConversionStop+0x168>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d90d      	bls.n	8002b40 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0210 	orr.w	r2, r3, #16
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e076      	b.n	8002c2e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	3301      	adds	r3, #1
 8002b44:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d1e3      	bne.n	8002b1c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2240      	movs	r2, #64	; 0x40
 8002b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b60      	cmp	r3, #96	; 0x60
 8002b60:	d015      	beq.n	8002b8e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d10e      	bne.n	8002b8e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d107      	bne.n	8002b8e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0210 	orr.w	r2, r2, #16
 8002b8c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d015      	beq.n	8002bc0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d10e      	bne.n	8002bc0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0220 	orr.w	r2, r2, #32
 8002bbe:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b60      	cmp	r3, #96	; 0x60
 8002bc4:	d005      	beq.n	8002bd2 <ADC_ConversionStop+0x102>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b6c      	cmp	r3, #108	; 0x6c
 8002bca:	d105      	bne.n	8002bd8 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002bcc:	230c      	movs	r3, #12
 8002bce:	617b      	str	r3, [r7, #20]
        break;
 8002bd0:	e005      	b.n	8002bde <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	617b      	str	r3, [r7, #20]
        break;
 8002bd6:	e002      	b.n	8002bde <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bd8:	2304      	movs	r3, #4
 8002bda:	617b      	str	r3, [r7, #20]
        break;
 8002bdc:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002bde:	f7fe ff5f 	bl	8001aa0 <HAL_GetTick>
 8002be2:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002be4:	e01b      	b.n	8002c1e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002be6:	f7fe ff5b 	bl	8001aa0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b0b      	cmp	r3, #11
 8002bf2:	d914      	bls.n	8002c1e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e007      	b.n	8002c2e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1dc      	bne.n	8002be6 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	000993ff 	.word	0x000993ff

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db0b      	blt.n	8002cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <__NVIC_EnableIRQ+0x38>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000e100 	.word	0xe000e100

08002cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db0a      	blt.n	8002d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	490c      	ldr	r1, [pc, #48]	; (8002d28 <__NVIC_SetPriority+0x4c>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d04:	e00a      	b.n	8002d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <__NVIC_SetPriority+0x50>)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3b04      	subs	r3, #4
 8002d14:	0112      	lsls	r2, r2, #4
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	761a      	strb	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f1c3 0307 	rsb	r3, r3, #7
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf28      	it	cs
 8002d4e:	2304      	movcs	r3, #4
 8002d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d902      	bls.n	8002d60 <NVIC_EncodePriority+0x30>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3b03      	subs	r3, #3
 8002d5e:	e000      	b.n	8002d62 <NVIC_EncodePriority+0x32>
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	401a      	ands	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43d9      	mvns	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	4313      	orrs	r3, r2
         );
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	; 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da8:	d301      	bcc.n	8002dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00f      	b.n	8002dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <SysTick_Config+0x40>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db6:	210f      	movs	r1, #15
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f7ff ff8e 	bl	8002cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc8:	2207      	movs	r2, #7
 8002dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	e000e010 	.word	0xe000e010

08002ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff29 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e04:	f7ff ff3e 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7ff ff8e 	bl	8002d30 <NVIC_EncodePriority>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff5d 	bl	8002cdc <__NVIC_SetPriority>
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	4603      	mov	r3, r0
 8002e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff31 	bl	8002ca0 <__NVIC_EnableIRQ>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffa2 	bl	8002d98 <SysTick_Config>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e037      	b.n	8002ee4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f940 	bl	800314c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}  
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_DMA_Start_IT+0x20>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e04a      	b.n	8002fa2 <HAL_DMA_Start_IT+0xb6>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d13a      	bne.n	8002f94 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f8d4 	bl	80030f0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 020e 	orr.w	r2, r2, #14
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e00f      	b.n	8002f82 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 020a 	orr.w	r2, r2, #10
 8002f70:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0204 	bic.w	r2, r2, #4
 8002f80:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e005      	b.n	8002fa0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d024      	beq.n	800301c <HAL_DMA_IRQHandler+0x72>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01f      	beq.n	800301c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0204 	bic.w	r2, r2, #4
 8002ff8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	2104      	movs	r1, #4
 8003004:	fa01 f202 	lsl.w	r2, r1, r2
 8003008:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d06a      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800301a:	e065      	b.n	80030e8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2202      	movs	r2, #2
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d02c      	beq.n	8003086 <HAL_DMA_IRQHandler+0xdc>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d027      	beq.n	8003086 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 020a 	bic.w	r2, r2, #10
 8003052:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	2102      	movs	r1, #2
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d035      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003084:	e030      	b.n	80030e8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2208      	movs	r2, #8
 800308c:	409a      	lsls	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d028      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x13e>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d023      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 020e 	bic.w	r2, r2, #14
 80030ae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
    }
  }
}  
 80030e6:	e7ff      	b.n	80030e8 <HAL_DMA_IRQHandler+0x13e>
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	2101      	movs	r1, #1
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d108      	bne.n	8003130 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800312e:	e007      	b.n	8003140 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <DMA_CalcBaseAndBitshift+0x60>)
 800315c:	429a      	cmp	r2, r3
 800315e:	d80f      	bhi.n	8003180 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <DMA_CalcBaseAndBitshift+0x64>)
 8003168:	4413      	add	r3, r2
 800316a:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <DMA_CalcBaseAndBitshift+0x68>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	009a      	lsls	r2, r3, #2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <DMA_CalcBaseAndBitshift+0x6c>)
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800317e:	e00e      	b.n	800319e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <DMA_CalcBaseAndBitshift+0x70>)
 8003188:	4413      	add	r3, r2
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <DMA_CalcBaseAndBitshift+0x68>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <DMA_CalcBaseAndBitshift+0x74>)
 800319c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40020407 	.word	0x40020407
 80031b0:	bffdfff8 	.word	0xbffdfff8
 80031b4:	cccccccd 	.word	0xcccccccd
 80031b8:	40020000 	.word	0x40020000
 80031bc:	bffdfbf8 	.word	0xbffdfbf8
 80031c0:	40020400 	.word	0x40020400

080031c4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80031c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031de:	4b2f      	ldr	r3, [pc, #188]	; (800329c <HAL_FLASH_Program+0xd8>)
 80031e0:	7e1b      	ldrb	r3, [r3, #24]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_FLASH_Program+0x26>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e054      	b.n	8003294 <HAL_FLASH_Program+0xd0>
 80031ea:	4b2c      	ldr	r3, [pc, #176]	; (800329c <HAL_FLASH_Program+0xd8>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031f4:	f000 f8a8 	bl	8003348 <FLASH_WaitForLastOperation>
 80031f8:	4603      	mov	r3, r0
 80031fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d144      	bne.n	800328c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d102      	bne.n	800320e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003208:	2301      	movs	r3, #1
 800320a:	757b      	strb	r3, [r7, #21]
 800320c:	e007      	b.n	800321e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d102      	bne.n	800321a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003214:	2302      	movs	r3, #2
 8003216:	757b      	strb	r3, [r7, #21]
 8003218:	e001      	b.n	800321e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800321a:	2304      	movs	r3, #4
 800321c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800321e:	2300      	movs	r3, #0
 8003220:	75bb      	strb	r3, [r7, #22]
 8003222:	e02d      	b.n	8003280 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003224:	7dbb      	ldrb	r3, [r7, #22]
 8003226:	005a      	lsls	r2, r3, #1
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	eb02 0c03 	add.w	ip, r2, r3
 800322e:	7dbb      	ldrb	r3, [r7, #22]
 8003230:	0119      	lsls	r1, r3, #4
 8003232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003236:	f1c1 0620 	rsb	r6, r1, #32
 800323a:	f1a1 0020 	sub.w	r0, r1, #32
 800323e:	fa22 f401 	lsr.w	r4, r2, r1
 8003242:	fa03 f606 	lsl.w	r6, r3, r6
 8003246:	4334      	orrs	r4, r6
 8003248:	fa23 f000 	lsr.w	r0, r3, r0
 800324c:	4304      	orrs	r4, r0
 800324e:	fa23 f501 	lsr.w	r5, r3, r1
 8003252:	b2a3      	uxth	r3, r4
 8003254:	4619      	mov	r1, r3
 8003256:	4660      	mov	r0, ip
 8003258:	f000 f85a 	bl	8003310 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800325c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003260:	f000 f872 	bl	8003348 <FLASH_WaitForLastOperation>
 8003264:	4603      	mov	r3, r0
 8003266:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_FLASH_Program+0xdc>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <HAL_FLASH_Program+0xdc>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800327a:	7dbb      	ldrb	r3, [r7, #22]
 800327c:	3301      	adds	r3, #1
 800327e:	75bb      	strb	r3, [r7, #22]
 8003280:	7dba      	ldrb	r2, [r7, #22]
 8003282:	7d7b      	ldrb	r3, [r7, #21]
 8003284:	429a      	cmp	r2, r3
 8003286:	d3cd      	bcc.n	8003224 <HAL_FLASH_Program+0x60>
 8003288:	e000      	b.n	800328c <HAL_FLASH_Program+0xc8>
      {
        break;
 800328a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_FLASH_Program+0xd8>)
 800328e:	2200      	movs	r2, #0
 8003290:	761a      	strb	r2, [r3, #24]

  return status;
 8003292:	7dfb      	ldrb	r3, [r7, #23]
}
 8003294:	4618      	mov	r0, r3
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329c:	20000108 	.word	0x20000108
 80032a0:	40022000 	.word	0x40022000

080032a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <HAL_FLASH_Unlock+0x40>)
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_FLASH_Unlock+0x40>)
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_FLASH_Unlock+0x44>)
 80032be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_FLASH_Unlock+0x40>)
 80032c2:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <HAL_FLASH_Unlock+0x48>)
 80032c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_FLASH_Unlock+0x40>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80032d6:	79fb      	ldrb	r3, [r7, #7]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40022000 	.word	0x40022000
 80032e8:	45670123 	.word	0x45670123
 80032ec:	cdef89ab 	.word	0xcdef89ab

080032f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_FLASH_Lock+0x1c>)
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <HAL_FLASH_Lock+0x1c>)
 80032fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40022000 	.word	0x40022000

08003310 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <FLASH_Program_HalfWord+0x30>)
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <FLASH_Program_HalfWord+0x34>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <FLASH_Program_HalfWord+0x34>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	887a      	ldrh	r2, [r7, #2]
 8003332:	801a      	strh	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	20000108 	.word	0x20000108
 8003344:	40022000 	.word	0x40022000

08003348 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7fe fba6 	bl	8001aa0 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003356:	e010      	b.n	800337a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d00c      	beq.n	800337a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <FLASH_WaitForLastOperation+0x2e>
 8003366:	f7fe fb9b 	bl	8001aa0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	d201      	bcs.n	800337a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e01f      	b.n	80033ba <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <FLASH_WaitForLastOperation+0x7c>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d0e8      	beq.n	8003358 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <FLASH_WaitForLastOperation+0x7c>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d102      	bne.n	8003398 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <FLASH_WaitForLastOperation+0x7c>)
 8003394:	2220      	movs	r2, #32
 8003396:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <FLASH_WaitForLastOperation+0x7c>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d005      	beq.n	80033b0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80033a4:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <FLASH_WaitForLastOperation+0x7c>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d103      	bne.n	80033b8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80033b0:	f000 f80a 	bl	80033c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40022000 	.word	0x40022000

080033c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <FLASH_SetErrorCode+0x5c>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d109      	bne.n	80033f2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80033de:	4b12      	ldr	r3, [pc, #72]	; (8003428 <FLASH_SetErrorCode+0x60>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	4a10      	ldr	r2, [pc, #64]	; (8003428 <FLASH_SetErrorCode+0x60>)
 80033e8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f043 0310 	orr.w	r3, r3, #16
 80033f0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <FLASH_SetErrorCode+0x5c>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d109      	bne.n	8003412 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <FLASH_SetErrorCode+0x60>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <FLASH_SetErrorCode+0x60>)
 8003408:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003412:	4a04      	ldr	r2, [pc, #16]	; (8003424 <FLASH_SetErrorCode+0x5c>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	60d3      	str	r3, [r2, #12]
}  
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40022000 	.word	0x40022000
 8003428:	20000108 	.word	0x20000108

0800342c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <HAL_FLASHEx_Erase+0xcc>)
 8003440:	7e1b      	ldrb	r3, [r3, #24]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_FLASHEx_Erase+0x1e>
 8003446:	2302      	movs	r3, #2
 8003448:	e052      	b.n	80034f0 <HAL_FLASHEx_Erase+0xc4>
 800344a:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_FLASHEx_Erase+0xcc>)
 800344c:	2201      	movs	r2, #1
 800344e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d115      	bne.n	8003484 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003458:	f24c 3050 	movw	r0, #50000	; 0xc350
 800345c:	f7ff ff74 	bl	8003348 <FLASH_WaitForLastOperation>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d140      	bne.n	80034e8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003466:	f000 f84b 	bl	8003500 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800346a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800346e:	f7ff ff6b 	bl	8003348 <FLASH_WaitForLastOperation>
 8003472:	4603      	mov	r3, r0
 8003474:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <HAL_FLASHEx_Erase+0xd0>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	4a20      	ldr	r2, [pc, #128]	; (80034fc <HAL_FLASHEx_Erase+0xd0>)
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	6113      	str	r3, [r2, #16]
 8003482:	e031      	b.n	80034e8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003484:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003488:	f7ff ff5e 	bl	8003348 <FLASH_WaitForLastOperation>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d12a      	bne.n	80034e8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f04f 32ff 	mov.w	r2, #4294967295
 8003498:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	e019      	b.n	80034d6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80034a2:	68b8      	ldr	r0, [r7, #8]
 80034a4:	f000 f846 	bl	8003534 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034ac:	f7ff ff4c 	bl	8003348 <FLASH_WaitForLastOperation>
 80034b0:	4603      	mov	r3, r0
 80034b2:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_FLASHEx_Erase+0xd0>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_FLASHEx_Erase+0xd0>)
 80034ba:	f023 0302 	bic.w	r3, r3, #2
 80034be:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	601a      	str	r2, [r3, #0]
            break;
 80034cc:	e00c      	b.n	80034e8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	02da      	lsls	r2, r3, #11
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d3dc      	bcc.n	80034a2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_FLASHEx_Erase+0xcc>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	761a      	strb	r2, [r3, #24]

  return status;
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000108 	.word	0x20000108
 80034fc:	40022000 	.word	0x40022000

08003500 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <FLASH_MassErase+0x2c>)
 8003506:	2200      	movs	r2, #0
 8003508:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <FLASH_MassErase+0x30>)
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <FLASH_MassErase+0x30>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <FLASH_MassErase+0x30>)
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	4a05      	ldr	r2, [pc, #20]	; (8003530 <FLASH_MassErase+0x30>)
 800351c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003520:	6113      	str	r3, [r2, #16]
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	20000108 	.word	0x20000108
 8003530:	40022000 	.word	0x40022000

08003534 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <FLASH_PageErase+0x38>)
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <FLASH_PageErase+0x3c>)
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <FLASH_PageErase+0x3c>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <FLASH_PageErase+0x3c>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <FLASH_PageErase+0x3c>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	4a05      	ldr	r2, [pc, #20]	; (8003570 <FLASH_PageErase+0x3c>)
 800355a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800355e:	6113      	str	r3, [r2, #16]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20000108 	.word	0x20000108
 8003570:	40022000 	.word	0x40022000

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003582:	e160      	b.n	8003846 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8152 	beq.w	8003840 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d005      	beq.n	80035b4 <HAL_GPIO_Init+0x40>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d130      	bne.n	8003616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ea:	2201      	movs	r2, #1
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 0201 	and.w	r2, r3, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d017      	beq.n	8003652 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2203      	movs	r2, #3
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d123      	bne.n	80036a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	08da      	lsrs	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	6939      	ldr	r1, [r7, #16]
 80036a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	2203      	movs	r2, #3
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0203 	and.w	r2, r3, #3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80ac 	beq.w	8003840 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e8:	4b5e      	ldr	r3, [pc, #376]	; (8003864 <HAL_GPIO_Init+0x2f0>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	4a5d      	ldr	r2, [pc, #372]	; (8003864 <HAL_GPIO_Init+0x2f0>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6193      	str	r3, [r2, #24]
 80036f4:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <HAL_GPIO_Init+0x2f0>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003700:	4a59      	ldr	r2, [pc, #356]	; (8003868 <HAL_GPIO_Init+0x2f4>)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	220f      	movs	r2, #15
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800372a:	d025      	beq.n	8003778 <HAL_GPIO_Init+0x204>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a4f      	ldr	r2, [pc, #316]	; (800386c <HAL_GPIO_Init+0x2f8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d01f      	beq.n	8003774 <HAL_GPIO_Init+0x200>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a4e      	ldr	r2, [pc, #312]	; (8003870 <HAL_GPIO_Init+0x2fc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d019      	beq.n	8003770 <HAL_GPIO_Init+0x1fc>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a4d      	ldr	r2, [pc, #308]	; (8003874 <HAL_GPIO_Init+0x300>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_GPIO_Init+0x1f8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a4c      	ldr	r2, [pc, #304]	; (8003878 <HAL_GPIO_Init+0x304>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00d      	beq.n	8003768 <HAL_GPIO_Init+0x1f4>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a4b      	ldr	r2, [pc, #300]	; (800387c <HAL_GPIO_Init+0x308>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <HAL_GPIO_Init+0x1f0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a4a      	ldr	r2, [pc, #296]	; (8003880 <HAL_GPIO_Init+0x30c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_GPIO_Init+0x1ec>
 800375c:	2306      	movs	r3, #6
 800375e:	e00c      	b.n	800377a <HAL_GPIO_Init+0x206>
 8003760:	2307      	movs	r3, #7
 8003762:	e00a      	b.n	800377a <HAL_GPIO_Init+0x206>
 8003764:	2305      	movs	r3, #5
 8003766:	e008      	b.n	800377a <HAL_GPIO_Init+0x206>
 8003768:	2304      	movs	r3, #4
 800376a:	e006      	b.n	800377a <HAL_GPIO_Init+0x206>
 800376c:	2303      	movs	r3, #3
 800376e:	e004      	b.n	800377a <HAL_GPIO_Init+0x206>
 8003770:	2302      	movs	r3, #2
 8003772:	e002      	b.n	800377a <HAL_GPIO_Init+0x206>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_GPIO_Init+0x206>
 8003778:	2300      	movs	r3, #0
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	f002 0203 	and.w	r2, r2, #3
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	4093      	lsls	r3, r2
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800378a:	4937      	ldr	r1, [pc, #220]	; (8003868 <HAL_GPIO_Init+0x2f4>)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	3302      	adds	r3, #2
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_GPIO_Init+0x310>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037bc:	4a31      	ldr	r2, [pc, #196]	; (8003884 <HAL_GPIO_Init+0x310>)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037c2:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_GPIO_Init+0x310>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037e6:	4a27      	ldr	r2, [pc, #156]	; (8003884 <HAL_GPIO_Init+0x310>)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <HAL_GPIO_Init+0x310>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003810:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_GPIO_Init+0x310>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003816:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_GPIO_Init+0x310>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <HAL_GPIO_Init+0x310>)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	f47f ae97 	bne.w	8003584 <HAL_GPIO_Init+0x10>
  }
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40021000 	.word	0x40021000
 8003868:	40010000 	.word	0x40010000
 800386c:	48000400 	.word	0x48000400
 8003870:	48000800 	.word	0x48000800
 8003874:	48000c00 	.word	0x48000c00
 8003878:	48001000 	.word	0x48001000
 800387c:	48001400 	.word	0x48001400
 8003880:	48001800 	.word	0x48001800
 8003884:	40010400 	.word	0x40010400

08003888 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003896:	e0c4      	b.n	8003a22 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003898:	2201      	movs	r2, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80b7 	beq.w	8003a1c <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80038ae:	4a64      	ldr	r2, [pc, #400]	; (8003a40 <HAL_GPIO_DeInit+0x1b8>)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4013      	ands	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038d6:	d025      	beq.n	8003924 <HAL_GPIO_DeInit+0x9c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a5a      	ldr	r2, [pc, #360]	; (8003a44 <HAL_GPIO_DeInit+0x1bc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d01f      	beq.n	8003920 <HAL_GPIO_DeInit+0x98>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a59      	ldr	r2, [pc, #356]	; (8003a48 <HAL_GPIO_DeInit+0x1c0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d019      	beq.n	800391c <HAL_GPIO_DeInit+0x94>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <HAL_GPIO_DeInit+0x1c4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <HAL_GPIO_DeInit+0x90>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a57      	ldr	r2, [pc, #348]	; (8003a50 <HAL_GPIO_DeInit+0x1c8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00d      	beq.n	8003914 <HAL_GPIO_DeInit+0x8c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a56      	ldr	r2, [pc, #344]	; (8003a54 <HAL_GPIO_DeInit+0x1cc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d007      	beq.n	8003910 <HAL_GPIO_DeInit+0x88>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a55      	ldr	r2, [pc, #340]	; (8003a58 <HAL_GPIO_DeInit+0x1d0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_GPIO_DeInit+0x84>
 8003908:	2306      	movs	r3, #6
 800390a:	e00c      	b.n	8003926 <HAL_GPIO_DeInit+0x9e>
 800390c:	2307      	movs	r3, #7
 800390e:	e00a      	b.n	8003926 <HAL_GPIO_DeInit+0x9e>
 8003910:	2305      	movs	r3, #5
 8003912:	e008      	b.n	8003926 <HAL_GPIO_DeInit+0x9e>
 8003914:	2304      	movs	r3, #4
 8003916:	e006      	b.n	8003926 <HAL_GPIO_DeInit+0x9e>
 8003918:	2303      	movs	r3, #3
 800391a:	e004      	b.n	8003926 <HAL_GPIO_DeInit+0x9e>
 800391c:	2302      	movs	r3, #2
 800391e:	e002      	b.n	8003926 <HAL_GPIO_DeInit+0x9e>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_GPIO_DeInit+0x9e>
 8003924:	2300      	movs	r3, #0
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	f002 0203 	and.w	r2, r2, #3
 800392c:	0092      	lsls	r2, r2, #2
 800392e:	4093      	lsls	r3, r2
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	429a      	cmp	r2, r3
 8003934:	d132      	bne.n	800399c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003936:	4b49      	ldr	r3, [pc, #292]	; (8003a5c <HAL_GPIO_DeInit+0x1d4>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	43db      	mvns	r3, r3
 800393e:	4947      	ldr	r1, [pc, #284]	; (8003a5c <HAL_GPIO_DeInit+0x1d4>)
 8003940:	4013      	ands	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003944:	4b45      	ldr	r3, [pc, #276]	; (8003a5c <HAL_GPIO_DeInit+0x1d4>)
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	43db      	mvns	r3, r3
 800394c:	4943      	ldr	r1, [pc, #268]	; (8003a5c <HAL_GPIO_DeInit+0x1d4>)
 800394e:	4013      	ands	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003952:	4b42      	ldr	r3, [pc, #264]	; (8003a5c <HAL_GPIO_DeInit+0x1d4>)
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	4940      	ldr	r1, [pc, #256]	; (8003a5c <HAL_GPIO_DeInit+0x1d4>)
 800395c:	4013      	ands	r3, r2
 800395e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003960:	4b3e      	ldr	r3, [pc, #248]	; (8003a5c <HAL_GPIO_DeInit+0x1d4>)
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	43db      	mvns	r3, r3
 8003968:	493c      	ldr	r1, [pc, #240]	; (8003a5c <HAL_GPIO_DeInit+0x1d4>)
 800396a:	4013      	ands	r3, r2
 800396c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	220f      	movs	r2, #15
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800397e:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <HAL_GPIO_DeInit+0x1b8>)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	43da      	mvns	r2, r3
 800398e:	482c      	ldr	r0, [pc, #176]	; (8003a40 <HAL_GPIO_DeInit+0x1b8>)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	400a      	ands	r2, r1
 8003996:	3302      	adds	r3, #2
 8003998:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	2103      	movs	r1, #3
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	401a      	ands	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	220f      	movs	r2, #15
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	08d2      	lsrs	r2, r2, #3
 80039d2:	4019      	ands	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3208      	adds	r2, #8
 80039d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	2103      	movs	r1, #3
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	401a      	ands	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	2101      	movs	r1, #1
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	401a      	ands	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2103      	movs	r1, #3
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	401a      	ands	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f47f af34 	bne.w	8003898 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40010000 	.word	0x40010000
 8003a44:	48000400 	.word	0x48000400
 8003a48:	48000800 	.word	0x48000800
 8003a4c:	48000c00 	.word	0x48000c00
 8003a50:	48001000 	.word	0x48001000
 8003a54:	48001400 	.word	0x48001400
 8003a58:	48001800 	.word	0x48001800
 8003a5c:	40010400 	.word	0x40010400

08003a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a70:	787b      	ldrb	r3, [r7, #1]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003aa0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f001 b83a 	b.w	8004b2a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 816f 	beq.w	8003daa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003acc:	4bb5      	ldr	r3, [pc, #724]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d00c      	beq.n	8003af2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ad8:	4bb2      	ldr	r3, [pc, #712]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d15c      	bne.n	8003b9e <HAL_RCC_OscConfig+0x10e>
 8003ae4:	4baf      	ldr	r3, [pc, #700]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d155      	bne.n	8003b9e <HAL_RCC_OscConfig+0x10e>
 8003af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d102      	bne.n	8003b24 <HAL_RCC_OscConfig+0x94>
 8003b1e:	4ba1      	ldr	r3, [pc, #644]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	e015      	b.n	8003b50 <HAL_RCC_OscConfig+0xc0>
 8003b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b28:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b40:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b4c:	4b95      	ldr	r3, [pc, #596]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b54:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003b58:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003b5c:	fa92 f2a2 	rbit	r2, r2
 8003b60:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003b64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f042 0220 	orr.w	r2, r2, #32
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	f002 021f 	and.w	r2, r2, #31
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8111 	beq.w	8003da8 <HAL_RCC_OscConfig+0x318>
 8003b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 8108 	bne.w	8003da8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f000 bfc6 	b.w	8004b2a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bae:	d106      	bne.n	8003bbe <HAL_RCC_OscConfig+0x12e>
 8003bb0:	4b7c      	ldr	r3, [pc, #496]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a7b      	ldr	r2, [pc, #492]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e036      	b.n	8003c2c <HAL_RCC_OscConfig+0x19c>
 8003bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x158>
 8003bce:	4b75      	ldr	r3, [pc, #468]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a74      	ldr	r2, [pc, #464]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b72      	ldr	r3, [pc, #456]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a71      	ldr	r2, [pc, #452]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e021      	b.n	8003c2c <HAL_RCC_OscConfig+0x19c>
 8003be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x184>
 8003bfa:	4b6a      	ldr	r3, [pc, #424]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a69      	ldr	r2, [pc, #420]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b67      	ldr	r3, [pc, #412]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a66      	ldr	r2, [pc, #408]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0x19c>
 8003c14:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a62      	ldr	r2, [pc, #392]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b60      	ldr	r3, [pc, #384]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a5f      	ldr	r2, [pc, #380]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d059      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fd ff30 	bl	8001aa0 <HAL_GetTick>
 8003c40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c46:	f7fd ff2b 	bl	8001aa0 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d902      	bls.n	8003c5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	f000 bf67 	b.w	8004b2a <HAL_RCC_OscConfig+0x109a>
 8003c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c60:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003c70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_OscConfig+0x1fe>
 8003c88:	4b46      	ldr	r3, [pc, #280]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	e015      	b.n	8003cba <HAL_RCC_OscConfig+0x22a>
 8003c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003caa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003cb6:	4b3b      	ldr	r3, [pc, #236]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cbe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003cc2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003cc6:	fa92 f2a2 	rbit	r2, r2
 8003cca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003cce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003cd2:	fab2 f282 	clz	r2, r2
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	f042 0220 	orr.w	r2, r2, #32
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	f002 021f 	and.w	r2, r2, #31
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ab      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1b6>
 8003cee:	e05c      	b.n	8003daa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fed6 	bl	8001aa0 <HAL_GetTick>
 8003cf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfa:	f7fd fed1 	bl	8001aa0 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d902      	bls.n	8003d10 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	f000 bf0d 	b.w	8004b2a <HAL_RCC_OscConfig+0x109a>
 8003d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003d24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCC_OscConfig+0x2b2>
 8003d3c:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	e015      	b.n	8003d6e <HAL_RCC_OscConfig+0x2de>
 8003d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_RCC_OscConfig+0x314>)
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d72:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003d76:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003d7a:	fa92 f2a2 	rbit	r2, r2
 8003d7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003d82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d86:	fab2 f282 	clz	r2, r2
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	f042 0220 	orr.w	r2, r2, #32
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	f002 021f 	and.w	r2, r2, #31
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ab      	bne.n	8003cfa <HAL_RCC_OscConfig+0x26a>
 8003da2:	e002      	b.n	8003daa <HAL_RCC_OscConfig+0x31a>
 8003da4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 817f 	beq.w	80040be <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003dc0:	4ba7      	ldr	r3, [pc, #668]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003dcc:	4ba4      	ldr	r3, [pc, #656]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d173      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x430>
 8003dd8:	4ba1      	ldr	r3, [pc, #644]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de4:	d16c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x430>
 8003de6:	2302      	movs	r3, #2
 8003de8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003df8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCC_OscConfig+0x386>
 8003e10:	4b93      	ldr	r3, [pc, #588]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	e013      	b.n	8003e3e <HAL_RCC_OscConfig+0x3ae>
 8003e16:	2302      	movs	r3, #2
 8003e18:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e2e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e3a:	4b89      	ldr	r3, [pc, #548]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003e44:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003e48:	fa92 f2a2 	rbit	r2, r2
 8003e4c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003e50:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e54:	fab2 f282 	clz	r2, r2
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f002 021f 	and.w	r2, r2, #31
 8003e64:	2101      	movs	r1, #1
 8003e66:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCC_OscConfig+0x3f6>
 8003e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d002      	beq.n	8003e86 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f000 be52 	b.w	8004b2a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e86:	4b76      	ldr	r3, [pc, #472]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	21f8      	movs	r1, #248	; 0xf8
 8003e9c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003ea4:	fa91 f1a1 	rbit	r1, r1
 8003ea8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003eac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003eb0:	fab1 f181 	clz	r1, r1
 8003eb4:	b2c9      	uxtb	r1, r1
 8003eb6:	408b      	lsls	r3, r1
 8003eb8:	4969      	ldr	r1, [pc, #420]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ebe:	e0fe      	b.n	80040be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8088 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x552>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003ee4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee8:	fab3 f383 	clz	r3, r3
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ef2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2301      	movs	r3, #1
 8003efc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fd fdcf 	bl	8001aa0 <HAL_GetTick>
 8003f02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f08:	f7fd fdca 	bl	8001aa0 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d902      	bls.n	8003f1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	f000 be06 	b.w	8004b2a <HAL_RCC_OscConfig+0x109a>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003f30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d102      	bne.n	8003f4e <HAL_RCC_OscConfig+0x4be>
 8003f48:	4b45      	ldr	r3, [pc, #276]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	e013      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e6>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003f60:	2302      	movs	r3, #2
 8003f62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f66:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2202      	movs	r2, #2
 8003f78:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003f7c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003f80:	fa92 f2a2 	rbit	r2, r2
 8003f84:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003f88:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f8c:	fab2 f282 	clz	r2, r2
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	f002 021f 	and.w	r2, r2, #31
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0af      	beq.n	8003f08 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	21f8      	movs	r1, #248	; 0xf8
 8003fbe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003fc6:	fa91 f1a1 	rbit	r1, r1
 8003fca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003fce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003fd2:	fab1 f181 	clz	r1, r1
 8003fd6:	b2c9      	uxtb	r1, r1
 8003fd8:	408b      	lsls	r3, r1
 8003fda:	4921      	ldr	r1, [pc, #132]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	e06d      	b.n	80040be <HAL_RCC_OscConfig+0x62e>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003ff4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004002:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	461a      	mov	r2, r3
 800400a:	2300      	movs	r3, #0
 800400c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fd fd47 	bl	8001aa0 <HAL_GetTick>
 8004012:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004016:	e00a      	b.n	800402e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004018:	f7fd fd42 	bl	8001aa0 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d902      	bls.n	800402e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	f000 bd7e 	b.w	8004b2a <HAL_RCC_OscConfig+0x109a>
 800402e:	2302      	movs	r3, #2
 8004030:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004040:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <HAL_RCC_OscConfig+0x5d4>
 8004058:	4b01      	ldr	r3, [pc, #4]	; (8004060 <HAL_RCC_OscConfig+0x5d0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	e016      	b.n	800408c <HAL_RCC_OscConfig+0x5fc>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	2302      	movs	r3, #2
 8004066:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004076:	2302      	movs	r3, #2
 8004078:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800407c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004088:	4bbf      	ldr	r3, [pc, #764]	; (8004388 <HAL_RCC_OscConfig+0x8f8>)
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2202      	movs	r2, #2
 800408e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004092:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004096:	fa92 f2a2 	rbit	r2, r2
 800409a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800409e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80040a2:	fab2 f282 	clz	r2, r2
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	f042 0220 	orr.w	r2, r2, #32
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	f002 021f 	and.w	r2, r2, #31
 80040b2:	2101      	movs	r1, #1
 80040b4:	fa01 f202 	lsl.w	r2, r1, r2
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ac      	bne.n	8004018 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8113 	beq.w	80042fa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d07c      	beq.n	80041de <HAL_RCC_OscConfig+0x74e>
 80040e4:	2301      	movs	r3, #1
 80040e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80040f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	4ba2      	ldr	r3, [pc, #648]	; (800438c <HAL_RCC_OscConfig+0x8fc>)
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	461a      	mov	r2, r3
 800410a:	2301      	movs	r3, #1
 800410c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410e:	f7fd fcc7 	bl	8001aa0 <HAL_GetTick>
 8004112:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004116:	e00a      	b.n	800412e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004118:	f7fd fcc2 	bl	8001aa0 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d902      	bls.n	800412e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	f000 bcfe 	b.w	8004b2a <HAL_RCC_OscConfig+0x109a>
 800412e:	2302      	movs	r3, #2
 8004130:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004138:	fa93 f2a3 	rbit	r2, r3
 800413c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004140:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800414a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800414e:	2202      	movs	r2, #2
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	fa93 f2a3 	rbit	r2, r3
 8004160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800416e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004172:	2202      	movs	r2, #2
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800417a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	fa93 f2a3 	rbit	r2, r3
 8004184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004188:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800418c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418e:	4b7e      	ldr	r3, [pc, #504]	; (8004388 <HAL_RCC_OscConfig+0x8f8>)
 8004190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004196:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800419a:	2102      	movs	r1, #2
 800419c:	6019      	str	r1, [r3, #0]
 800419e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	fa93 f1a3 	rbit	r1, r3
 80041ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80041b4:	6019      	str	r1, [r3, #0]
  return result;
 80041b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2101      	movs	r1, #1
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d09d      	beq.n	8004118 <HAL_RCC_OscConfig+0x688>
 80041dc:	e08d      	b.n	80042fa <HAL_RCC_OscConfig+0x86a>
 80041de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	fa93 f2a3 	rbit	r2, r3
 80041f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004200:	601a      	str	r2, [r3, #0]
  return result;
 8004202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004206:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800420a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420c:	fab3 f383 	clz	r3, r3
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	4b5d      	ldr	r3, [pc, #372]	; (800438c <HAL_RCC_OscConfig+0x8fc>)
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	461a      	mov	r2, r3
 800421c:	2300      	movs	r3, #0
 800421e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004220:	f7fd fc3e 	bl	8001aa0 <HAL_GetTick>
 8004224:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422a:	f7fd fc39 	bl	8001aa0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d902      	bls.n	8004240 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	f000 bc75 	b.w	8004b2a <HAL_RCC_OscConfig+0x109a>
 8004240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004244:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004248:	2202      	movs	r2, #2
 800424a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004250:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	fa93 f2a3 	rbit	r2, r3
 800425a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800425e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800426c:	2202      	movs	r2, #2
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004274:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	fa93 f2a3 	rbit	r2, r3
 800427e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004290:	2202      	movs	r2, #2
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004298:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	fa93 f2a3 	rbit	r2, r3
 80042a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80042aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	4b36      	ldr	r3, [pc, #216]	; (8004388 <HAL_RCC_OscConfig+0x8f8>)
 80042ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80042b8:	2102      	movs	r1, #2
 80042ba:	6019      	str	r1, [r3, #0]
 80042bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	fa93 f1a3 	rbit	r1, r3
 80042ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042d2:	6019      	str	r1, [r3, #0]
  return result;
 80042d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2101      	movs	r1, #1
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d197      	bne.n	800422a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 81a5 	beq.w	800465a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004310:	2300      	movs	r3, #0
 8004312:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <HAL_RCC_OscConfig+0x8f8>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d116      	bne.n	8004350 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_OscConfig+0x8f8>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <HAL_RCC_OscConfig+0x8f8>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432c:	61d3      	str	r3, [r2, #28]
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <HAL_RCC_OscConfig+0x8f8>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004348:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <HAL_RCC_OscConfig+0x900>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d121      	bne.n	80043a0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <HAL_RCC_OscConfig+0x900>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <HAL_RCC_OscConfig+0x900>)
 8004362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004366:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004368:	f7fd fb9a 	bl	8001aa0 <HAL_GetTick>
 800436c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	e010      	b.n	8004394 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004372:	f7fd fb95 	bl	8001aa0 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d908      	bls.n	8004394 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e3d1      	b.n	8004b2a <HAL_RCC_OscConfig+0x109a>
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	10908120 	.word	0x10908120
 8004390:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	4b8d      	ldr	r3, [pc, #564]	; (80045cc <HAL_RCC_OscConfig+0xb3c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0e8      	beq.n	8004372 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d106      	bne.n	80043be <HAL_RCC_OscConfig+0x92e>
 80043b0:	4b87      	ldr	r3, [pc, #540]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4a86      	ldr	r2, [pc, #536]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6213      	str	r3, [r2, #32]
 80043bc:	e035      	b.n	800442a <HAL_RCC_OscConfig+0x99a>
 80043be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x958>
 80043ce:	4b80      	ldr	r3, [pc, #512]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4a7f      	ldr	r2, [pc, #508]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	6213      	str	r3, [r2, #32]
 80043da:	4b7d      	ldr	r3, [pc, #500]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4a7c      	ldr	r2, [pc, #496]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	6213      	str	r3, [r2, #32]
 80043e6:	e020      	b.n	800442a <HAL_RCC_OscConfig+0x99a>
 80043e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b05      	cmp	r3, #5
 80043f6:	d10c      	bne.n	8004412 <HAL_RCC_OscConfig+0x982>
 80043f8:	4b75      	ldr	r3, [pc, #468]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4a74      	ldr	r2, [pc, #464]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80043fe:	f043 0304 	orr.w	r3, r3, #4
 8004402:	6213      	str	r3, [r2, #32]
 8004404:	4b72      	ldr	r3, [pc, #456]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	4a71      	ldr	r2, [pc, #452]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6213      	str	r3, [r2, #32]
 8004410:	e00b      	b.n	800442a <HAL_RCC_OscConfig+0x99a>
 8004412:	4b6f      	ldr	r3, [pc, #444]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	4a6e      	ldr	r2, [pc, #440]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	6213      	str	r3, [r2, #32]
 800441e:	4b6c      	ldr	r3, [pc, #432]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4a6b      	ldr	r2, [pc, #428]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800442a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800442e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8081 	beq.w	800453e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443c:	f7fd fb30 	bl	8001aa0 <HAL_GetTick>
 8004440:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004444:	e00b      	b.n	800445e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004446:	f7fd fb2b 	bl	8001aa0 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	; 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e365      	b.n	8004b2a <HAL_RCC_OscConfig+0x109a>
 800445e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004462:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004466:	2202      	movs	r2, #2
 8004468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800446e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	fa93 f2a3 	rbit	r2, r3
 8004478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800447c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004486:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800448a:	2202      	movs	r2, #2
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004492:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	fa93 f2a3 	rbit	r2, r3
 800449c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80044a4:	601a      	str	r2, [r3, #0]
  return result;
 80044a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044aa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80044ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f043 0302 	orr.w	r3, r3, #2
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d102      	bne.n	80044ca <HAL_RCC_OscConfig+0xa3a>
 80044c4:	4b42      	ldr	r3, [pc, #264]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	e013      	b.n	80044f2 <HAL_RCC_OscConfig+0xa62>
 80044ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80044d2:	2202      	movs	r2, #2
 80044d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	fa93 f2a3 	rbit	r2, r3
 80044e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044e8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80044fa:	2102      	movs	r1, #2
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004502:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	fa92 f1a2 	rbit	r1, r2
 800450c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004510:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004514:	6011      	str	r1, [r2, #0]
  return result;
 8004516:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800451a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	fab2 f282 	clz	r2, r2
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	f002 021f 	and.w	r2, r2, #31
 8004530:	2101      	movs	r1, #1
 8004532:	fa01 f202 	lsl.w	r2, r1, r2
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d084      	beq.n	8004446 <HAL_RCC_OscConfig+0x9b6>
 800453c:	e083      	b.n	8004646 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453e:	f7fd faaf 	bl	8001aa0 <HAL_GetTick>
 8004542:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fd faaa 	bl	8001aa0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e2e4      	b.n	8004b2a <HAL_RCC_OscConfig+0x109a>
 8004560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004564:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004568:	2202      	movs	r2, #2
 800456a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004570:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	fa93 f2a3 	rbit	r2, r3
 800457a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004588:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800458c:	2202      	movs	r2, #2
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004594:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	fa93 f2a3 	rbit	r2, r3
 800459e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80045a6:	601a      	str	r2, [r3, #0]
  return result;
 80045a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80045b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d106      	bne.n	80045d4 <HAL_RCC_OscConfig+0xb44>
 80045c6:	4b02      	ldr	r3, [pc, #8]	; (80045d0 <HAL_RCC_OscConfig+0xb40>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	e017      	b.n	80045fc <HAL_RCC_OscConfig+0xb6c>
 80045cc:	40007000 	.word	0x40007000
 80045d0:	40021000 	.word	0x40021000
 80045d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80045dc:	2202      	movs	r2, #2
 80045de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	fa93 f2a3 	rbit	r2, r3
 80045ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	4bb3      	ldr	r3, [pc, #716]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004600:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004604:	2102      	movs	r1, #2
 8004606:	6011      	str	r1, [r2, #0]
 8004608:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800460c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	fa92 f1a2 	rbit	r1, r2
 8004616:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800461a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800461e:	6011      	str	r1, [r2, #0]
  return result;
 8004620:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004624:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	fab2 f282 	clz	r2, r2
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	f002 021f 	and.w	r2, r2, #31
 800463a:	2101      	movs	r1, #1
 800463c:	fa01 f202 	lsl.w	r2, r1, r2
 8004640:	4013      	ands	r3, r2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d180      	bne.n	8004548 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004646:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800464a:	2b01      	cmp	r3, #1
 800464c:	d105      	bne.n	800465a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464e:	4b9e      	ldr	r3, [pc, #632]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4a9d      	ldr	r2, [pc, #628]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004658:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800465a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800465e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 825e 	beq.w	8004b28 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800466c:	4b96      	ldr	r3, [pc, #600]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b08      	cmp	r3, #8
 8004676:	f000 821f 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800467a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800467e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b02      	cmp	r3, #2
 8004688:	f040 8170 	bne.w	800496c <HAL_RCC_OscConfig+0xedc>
 800468c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004690:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004694:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800469e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	fa93 f2a3 	rbit	r2, r3
 80046a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80046b0:	601a      	str	r2, [r3, #0]
  return result;
 80046b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80046ba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046bc:	fab3 f383 	clz	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	461a      	mov	r2, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fd f9e5 	bl	8001aa0 <HAL_GetTick>
 80046d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046da:	e009      	b.n	80046f0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd f9e0 	bl	8001aa0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e21c      	b.n	8004b2a <HAL_RCC_OscConfig+0x109a>
 80046f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004702:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	fa93 f2a3 	rbit	r2, r3
 800470c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004710:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004714:	601a      	str	r2, [r3, #0]
  return result;
 8004716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800471a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800471e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004720:	fab3 f383 	clz	r3, r3
 8004724:	b2db      	uxtb	r3, r3
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	d102      	bne.n	800473a <HAL_RCC_OscConfig+0xcaa>
 8004734:	4b64      	ldr	r3, [pc, #400]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	e027      	b.n	800478a <HAL_RCC_OscConfig+0xcfa>
 800473a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800473e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004742:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800474c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	fa93 f2a3 	rbit	r2, r3
 8004756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800475a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004764:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004772:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	fa93 f2a3 	rbit	r2, r3
 800477c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004780:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	4b50      	ldr	r3, [pc, #320]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800478e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004792:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004796:	6011      	str	r1, [r2, #0]
 8004798:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800479c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	fa92 f1a2 	rbit	r1, r2
 80047a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047aa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80047ae:	6011      	str	r1, [r2, #0]
  return result;
 80047b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047b4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	fab2 f282 	clz	r2, r2
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	f042 0220 	orr.w	r2, r2, #32
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	f002 021f 	and.w	r2, r2, #31
 80047ca:	2101      	movs	r1, #1
 80047cc:	fa01 f202 	lsl.w	r2, r1, r2
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d182      	bne.n	80046dc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d6:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f023 020f 	bic.w	r2, r3, #15
 80047de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	4937      	ldr	r1, [pc, #220]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 80047f0:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80047f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a19      	ldr	r1, [r3, #32]
 8004804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004808:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	430b      	orrs	r3, r1
 8004812:	492d      	ldr	r1, [pc, #180]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
 8004818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800481c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800482a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	fa93 f2a3 	rbit	r2, r3
 8004834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004838:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800483c:	601a      	str	r2, [r3, #0]
  return result;
 800483e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004842:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004846:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004848:	fab3 f383 	clz	r3, r3
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004852:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	461a      	mov	r2, r3
 800485a:	2301      	movs	r3, #1
 800485c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485e:	f7fd f91f 	bl	8001aa0 <HAL_GetTick>
 8004862:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004866:	e009      	b.n	800487c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7fd f91a 	bl	8001aa0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e156      	b.n	8004b2a <HAL_RCC_OscConfig+0x109a>
 800487c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004880:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	fa93 f2a3 	rbit	r2, r3
 8004898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800489c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80048a0:	601a      	str	r2, [r3, #0]
  return result;
 80048a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80048aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0xe3c>
 80048c0:	4b01      	ldr	r3, [pc, #4]	; (80048c8 <HAL_RCC_OscConfig+0xe38>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	e02a      	b.n	800491c <HAL_RCC_OscConfig+0xe8c>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80048d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048de:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	fa93 f2a3 	rbit	r2, r3
 80048e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80048fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004904:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	fa93 f2a3 	rbit	r2, r3
 800490e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004912:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	4b86      	ldr	r3, [pc, #536]	; (8004b34 <HAL_RCC_OscConfig+0x10a4>)
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004920:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004924:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800492e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	fa92 f1a2 	rbit	r1, r2
 8004938:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800493c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004940:	6011      	str	r1, [r2, #0]
  return result;
 8004942:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004946:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	fab2 f282 	clz	r2, r2
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	f042 0220 	orr.w	r2, r2, #32
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	f002 021f 	and.w	r2, r2, #31
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f202 	lsl.w	r2, r1, r2
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	f43f af7f 	beq.w	8004868 <HAL_RCC_OscConfig+0xdd8>
 800496a:	e0dd      	b.n	8004b28 <HAL_RCC_OscConfig+0x1098>
 800496c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004970:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800497e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	fa93 f2a3 	rbit	r2, r3
 8004988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800498c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004990:	601a      	str	r2, [r3, #0]
  return result;
 8004992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004996:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800499a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	461a      	mov	r2, r3
 80049ae:	2300      	movs	r3, #0
 80049b0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fd f875 	bl	8001aa0 <HAL_GetTick>
 80049b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ba:	e009      	b.n	80049d0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd f870 	bl	8001aa0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0ac      	b.n	8004b2a <HAL_RCC_OscConfig+0x109a>
 80049d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80049d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	fa93 f2a3 	rbit	r2, r3
 80049ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80049f4:	601a      	str	r2, [r3, #0]
  return result;
 80049f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80049fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a00:	fab3 f383 	clz	r3, r3
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d102      	bne.n	8004a1a <HAL_RCC_OscConfig+0xf8a>
 8004a14:	4b47      	ldr	r3, [pc, #284]	; (8004b34 <HAL_RCC_OscConfig+0x10a4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	e027      	b.n	8004a6a <HAL_RCC_OscConfig+0xfda>
 8004a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	fa93 f2a3 	rbit	r2, r3
 8004a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a44:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	fa93 f2a3 	rbit	r2, r3
 8004a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a60:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <HAL_RCC_OscConfig+0x10a4>)
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a76:	6011      	str	r1, [r2, #0]
 8004a78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	fa92 f1a2 	rbit	r1, r2
 8004a86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a8a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004a8e:	6011      	str	r1, [r2, #0]
  return result;
 8004a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a94:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	fab2 f282 	clz	r2, r2
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	f042 0220 	orr.w	r2, r2, #32
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	f002 021f 	and.w	r2, r2, #31
 8004aaa:	2101      	movs	r1, #1
 8004aac:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d182      	bne.n	80049bc <HAL_RCC_OscConfig+0xf2c>
 8004ab6:	e037      	b.n	8004b28 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004abc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e02e      	b.n	8004b2a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <HAL_RCC_OscConfig+0x10a4>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004ad4:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_RCC_OscConfig+0x10a4>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004adc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ae0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d117      	bne.n	8004b24 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004af4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004af8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d10b      	bne.n	8004b24 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b10:	f003 020f 	and.w	r2, r3, #15
 8004b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40021000 	.word	0x40021000

08004b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b09e      	sub	sp, #120	; 0x78
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e162      	b.n	8004e16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b50:	4b90      	ldr	r3, [pc, #576]	; (8004d94 <HAL_RCC_ClockConfig+0x25c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d910      	bls.n	8004b80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b8d      	ldr	r3, [pc, #564]	; (8004d94 <HAL_RCC_ClockConfig+0x25c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 0207 	bic.w	r2, r3, #7
 8004b66:	498b      	ldr	r1, [pc, #556]	; (8004d94 <HAL_RCC_ClockConfig+0x25c>)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6e:	4b89      	ldr	r3, [pc, #548]	; (8004d94 <HAL_RCC_ClockConfig+0x25c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e14a      	b.n	8004e16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8c:	4b82      	ldr	r3, [pc, #520]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	497f      	ldr	r1, [pc, #508]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80dc 	beq.w	8004d64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d13c      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xf6>
 8004bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc4:	fab3 f383 	clz	r3, r3
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d102      	bne.n	8004bde <HAL_RCC_ClockConfig+0xa6>
 8004bd8:	4b6f      	ldr	r3, [pc, #444]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	e00f      	b.n	8004bfe <HAL_RCC_ClockConfig+0xc6>
 8004bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be6:	fa93 f3a3 	rbit	r3, r3
 8004bea:	667b      	str	r3, [r7, #100]	; 0x64
 8004bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bfa:	4b67      	ldr	r3, [pc, #412]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c02:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c06:	fa92 f2a2 	rbit	r2, r2
 8004c0a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004c0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c0e:	fab2 f282 	clz	r2, r2
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	f042 0220 	orr.w	r2, r2, #32
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	f002 021f 	and.w	r2, r2, #31
 8004c1e:	2101      	movs	r1, #1
 8004c20:	fa01 f202 	lsl.w	r2, r1, r2
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d17b      	bne.n	8004d22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0f3      	b.n	8004e16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d13c      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x178>
 8004c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3e:	fa93 f3a3 	rbit	r3, r3
 8004c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c46:	fab3 f383 	clz	r3, r3
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d102      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x128>
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	e00f      	b.n	8004c80 <HAL_RCC_ClockConfig+0x148>
 8004c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c68:	fa93 f3a3 	rbit	r3, r3
 8004c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c72:	643b      	str	r3, [r7, #64]	; 0x40
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7c:	4b46      	ldr	r3, [pc, #280]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c84:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c88:	fa92 f2a2 	rbit	r2, r2
 8004c8c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c90:	fab2 f282 	clz	r2, r2
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	f042 0220 	orr.w	r2, r2, #32
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	f002 021f 	and.w	r2, r2, #31
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d13a      	bne.n	8004d22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0b2      	b.n	8004e16 <HAL_RCC_ClockConfig+0x2de>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbe:	fab3 f383 	clz	r3, r3
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d102      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x1a0>
 8004cd2:	4b31      	ldr	r3, [pc, #196]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	e00d      	b.n	8004cf4 <HAL_RCC_ClockConfig+0x1bc>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	4b29      	ldr	r3, [pc, #164]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	61ba      	str	r2, [r7, #24]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	fa92 f2a2 	rbit	r2, r2
 8004cfe:	617a      	str	r2, [r7, #20]
  return result;
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	fab2 f282 	clz	r2, r2
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	f042 0220 	orr.w	r2, r2, #32
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	f002 021f 	and.w	r2, r2, #31
 8004d12:	2101      	movs	r1, #1
 8004d14:	fa01 f202 	lsl.w	r2, r1, r2
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e079      	b.n	8004e16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f023 0203 	bic.w	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	491a      	ldr	r1, [pc, #104]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d34:	f7fc feb4 	bl	8001aa0 <HAL_GetTick>
 8004d38:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3c:	f7fc feb0 	bl	8001aa0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e061      	b.n	8004e16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_RCC_ClockConfig+0x260>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 020c 	and.w	r2, r3, #12
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d1eb      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_ClockConfig+0x25c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d214      	bcs.n	8004d9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d72:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <HAL_RCC_ClockConfig+0x25c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 0207 	bic.w	r2, r3, #7
 8004d7a:	4906      	ldr	r1, [pc, #24]	; (8004d94 <HAL_RCC_ClockConfig+0x25c>)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d82:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <HAL_RCC_ClockConfig+0x25c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e040      	b.n	8004e16 <HAL_RCC_ClockConfig+0x2de>
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da8:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <HAL_RCC_ClockConfig+0x2e8>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	491a      	ldr	r1, [pc, #104]	; (8004e20 <HAL_RCC_ClockConfig+0x2e8>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc6:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <HAL_RCC_ClockConfig+0x2e8>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4912      	ldr	r1, [pc, #72]	; (8004e20 <HAL_RCC_ClockConfig+0x2e8>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004dda:	f000 f829 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8004dde:	4601      	mov	r1, r0
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <HAL_RCC_ClockConfig+0x2e8>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de8:	22f0      	movs	r2, #240	; 0xf0
 8004dea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	fa92 f2a2 	rbit	r2, r2
 8004df2:	60fa      	str	r2, [r7, #12]
  return result;
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	fab2 f282 	clz	r2, r2
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	40d3      	lsrs	r3, r2
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <HAL_RCC_ClockConfig+0x2ec>)
 8004e00:	5cd3      	ldrb	r3, [r2, r3]
 8004e02:	fa21 f303 	lsr.w	r3, r1, r3
 8004e06:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <HAL_RCC_ClockConfig+0x2f0>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004e0a:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <HAL_RCC_ClockConfig+0x2f4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc fe02 	bl	8001a18 <HAL_InitTick>
  
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3778      	adds	r7, #120	; 0x78
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000
 8004e24:	08006228 	.word	0x08006228
 8004e28:	20000000 	.word	0x20000000
 8004e2c:	20000004 	.word	0x20000004

08004e30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b08b      	sub	sp, #44	; 0x2c
 8004e34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004e4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d002      	beq.n	8004e60 <HAL_RCC_GetSysClockFreq+0x30>
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d003      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x36>
 8004e5e:	e03f      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e62:	623b      	str	r3, [r7, #32]
      break;
 8004e64:	e03f      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004e6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004e70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	fa92 f2a2 	rbit	r2, r2
 8004e78:	607a      	str	r2, [r7, #4]
  return result;
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	fab2 f282 	clz	r2, r2
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	40d3      	lsrs	r3, r2
 8004e84:	4a1d      	ldr	r2, [pc, #116]	; (8004efc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e86:	5cd3      	ldrb	r3, [r2, r3]
 8004e88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004e8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	220f      	movs	r2, #15
 8004e94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	fa92 f2a2 	rbit	r2, r2
 8004e9c:	60fa      	str	r2, [r7, #12]
  return result;
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	fab2 f282 	clz	r2, r2
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	40d3      	lsrs	r3, r2
 8004ea8:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004eaa:	5cd3      	ldrb	r3, [r2, r3]
 8004eac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004eb8:	4a0f      	ldr	r2, [pc, #60]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec8:	e007      	b.n	8004eda <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004eca:	4a0b      	ldr	r2, [pc, #44]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	fb02 f303 	mul.w	r3, r2, r3
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	623b      	str	r3, [r7, #32]
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ee2:	623b      	str	r3, [r7, #32]
      break;
 8004ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	372c      	adds	r7, #44	; 0x2c
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	08006240 	.word	0x08006240
 8004f00:	08006250 	.word	0x08006250

08004f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f08:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000000 	.word	0x20000000

08004f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f22:	f7ff ffef 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f26:	4601      	mov	r1, r0
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	fa92 f2a2 	rbit	r2, r2
 8004f3c:	603a      	str	r2, [r7, #0]
  return result;
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	fab2 f282 	clz	r2, r2
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	40d3      	lsrs	r3, r2
 8004f48:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f4a:	5cd3      	ldrb	r3, [r2, r3]
 8004f4c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	08006238 	.word	0x08006238

08004f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f66:	f7ff ffcd 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f6a:	4601      	mov	r1, r0
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004f74:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004f78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	fa92 f2a2 	rbit	r2, r2
 8004f80:	603a      	str	r2, [r7, #0]
  return result;
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	fab2 f282 	clz	r2, r2
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	40d3      	lsrs	r3, r2
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004f8e:	5cd3      	ldrb	r3, [r2, r3]
 8004f90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	08006238 	.word	0x08006238

08004fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b092      	sub	sp, #72	; 0x48
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80d4 	beq.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc8:	4b4e      	ldr	r3, [pc, #312]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10e      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	4a4a      	ldr	r2, [pc, #296]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fde:	61d3      	str	r3, [r2, #28]
 8004fe0:	4b48      	ldr	r3, [pc, #288]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff2:	4b45      	ldr	r3, [pc, #276]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d118      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffe:	4b42      	ldr	r3, [pc, #264]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a41      	ldr	r2, [pc, #260]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005008:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500a:	f7fc fd49 	bl	8001aa0 <HAL_GetTick>
 800500e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	e008      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005012:	f7fc fd45 	bl	8001aa0 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b64      	cmp	r3, #100	; 0x64
 800501e:	d901      	bls.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e1d6      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	4b38      	ldr	r3, [pc, #224]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005030:	4b34      	ldr	r3, [pc, #208]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800503a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8084 	beq.w	800514a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800504c:	429a      	cmp	r2, r3
 800504e:	d07c      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005050:	4b2c      	ldr	r3, [pc, #176]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800505a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800505e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	fa93 f3a3 	rbit	r3, r3
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800506a:	fab3 f383 	clz	r3, r3
 800506e:	b2db      	uxtb	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	461a      	mov	r2, r3
 800507a:	2301      	movs	r3, #1
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	fa93 f3a3 	rbit	r3, r3
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800508e:	fab3 f383 	clz	r3, r3
 8005092:	b2db      	uxtb	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	4b1d      	ldr	r3, [pc, #116]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050a2:	4a18      	ldr	r2, [pc, #96]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04b      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b2:	f7fc fcf5 	bl	8001aa0 <HAL_GetTick>
 80050b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b8:	e00a      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ba:	f7fc fcf1 	bl	8001aa0 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e180      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80050d0:	2302      	movs	r3, #2
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	fa93 f3a3 	rbit	r3, r3
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
 80050dc:	2302      	movs	r3, #2
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	fa93 f3a3 	rbit	r3, r3
 80050e6:	61fb      	str	r3, [r7, #28]
  return result;
 80050e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f043 0302 	orr.w	r3, r3, #2
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d108      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80050fe:	4b01      	ldr	r3, [pc, #4]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	e00d      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005104:	40021000 	.word	0x40021000
 8005108:	40007000 	.word	0x40007000
 800510c:	10908100 	.word	0x10908100
 8005110:	2302      	movs	r3, #2
 8005112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	4b9a      	ldr	r3, [pc, #616]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2202      	movs	r2, #2
 8005122:	613a      	str	r2, [r7, #16]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	fa92 f2a2 	rbit	r2, r2
 800512a:	60fa      	str	r2, [r7, #12]
  return result;
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	fab2 f282 	clz	r2, r2
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	f002 021f 	and.w	r2, r2, #31
 800513e:	2101      	movs	r1, #1
 8005140:	fa01 f202 	lsl.w	r2, r1, r2
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0b7      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800514a:	4b8f      	ldr	r3, [pc, #572]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	498c      	ldr	r1, [pc, #560]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005158:	4313      	orrs	r3, r2
 800515a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800515c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005160:	2b01      	cmp	r3, #1
 8005162:	d105      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005164:	4b88      	ldr	r3, [pc, #544]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	4a87      	ldr	r2, [pc, #540]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800516a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800517c:	4b82      	ldr	r3, [pc, #520]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	f023 0203 	bic.w	r2, r3, #3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	497f      	ldr	r1, [pc, #508]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800519a:	4b7b      	ldr	r3, [pc, #492]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	4978      	ldr	r1, [pc, #480]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051b8:	4b73      	ldr	r3, [pc, #460]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	4970      	ldr	r1, [pc, #448]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051d6:	4b6c      	ldr	r3, [pc, #432]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	f023 0210 	bic.w	r2, r3, #16
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4969      	ldr	r1, [pc, #420]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80051f4:	4b64      	ldr	r3, [pc, #400]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005200:	4961      	ldr	r1, [pc, #388]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005212:	4b5d      	ldr	r3, [pc, #372]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f023 0220 	bic.w	r2, r3, #32
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	495a      	ldr	r1, [pc, #360]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005220:	4313      	orrs	r3, r2
 8005222:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005230:	4b55      	ldr	r3, [pc, #340]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	4952      	ldr	r1, [pc, #328]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800523e:	4313      	orrs	r3, r2
 8005240:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800524e:	4b4e      	ldr	r3, [pc, #312]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	494b      	ldr	r1, [pc, #300]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800525c:	4313      	orrs	r3, r2
 800525e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800526c:	4b46      	ldr	r3, [pc, #280]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	4943      	ldr	r1, [pc, #268]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800528a:	4b3f      	ldr	r3, [pc, #252]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	493c      	ldr	r1, [pc, #240]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052a8:	4b37      	ldr	r3, [pc, #220]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	4934      	ldr	r1, [pc, #208]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80052c6:	4b30      	ldr	r3, [pc, #192]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	492d      	ldr	r1, [pc, #180]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80052e4:	4b28      	ldr	r3, [pc, #160]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	4925      	ldr	r1, [pc, #148]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d008      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005302:	4b21      	ldr	r3, [pc, #132]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	491e      	ldr	r1, [pc, #120]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005310:	4313      	orrs	r3, r2
 8005312:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005320:	4b19      	ldr	r3, [pc, #100]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	4916      	ldr	r1, [pc, #88]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800532e:	4313      	orrs	r3, r2
 8005330:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	490f      	ldr	r1, [pc, #60]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800534c:	4313      	orrs	r3, r2
 800534e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	4907      	ldr	r1, [pc, #28]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800536a:	4313      	orrs	r3, r2
 800536c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800537a:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	e002      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538e:	4913      	ldr	r1, [pc, #76]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005390:	4313      	orrs	r3, r2
 8005392:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80053a0:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ac:	490b      	ldr	r1, [pc, #44]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80053be:	4b07      	ldr	r3, [pc, #28]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ca:	4904      	ldr	r1, [pc, #16]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3748      	adds	r7, #72	; 0x48
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000

080053e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e040      	b.n	8005474 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fc fa16 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2224      	movs	r2, #36	; 0x24
 800540c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8d4 	bl	80055cc <UART_SetConfig>
 8005424:	4603      	mov	r3, r0
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e022      	b.n	8005474 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa9c 	bl	8005974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800544a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800545a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fb23 	bl	8005ab8 <UART_CheckIdleState>
 8005472:	4603      	mov	r3, r0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	; 0x28
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005490:	2b20      	cmp	r3, #32
 8005492:	d178      	bne.n	8005586 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_UART_Transmit+0x24>
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e071      	b.n	8005588 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2221      	movs	r2, #33	; 0x21
 80054b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b2:	f7fc faf5 	bl	8001aa0 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d0:	d108      	bne.n	80054e4 <HAL_UART_Transmit+0x68>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e003      	b.n	80054ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054ec:	e030      	b.n	8005550 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fb85 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e03c      	b.n	8005588 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	881a      	ldrh	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005520:	b292      	uxth	r2, r2
 8005522:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	3302      	adds	r3, #2
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	e008      	b.n	800553e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	781a      	ldrb	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	b292      	uxth	r2, r2
 8005536:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1c8      	bne.n	80054ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2200      	movs	r2, #0
 8005564:	2140      	movs	r1, #64	; 0x40
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fb4e 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e005      	b.n	8005588 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e000      	b.n	8005588 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005586:	2302      	movs	r3, #2
  }
}
 8005588:	4618      	mov	r0, r3
 800558a:	3720      	adds	r7, #32
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4b92      	ldr	r3, [pc, #584]	; (8005840 <UART_SetConfig+0x274>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	6979      	ldr	r1, [r7, #20]
 8005600:	430b      	orrs	r3, r1
 8005602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	430a      	orrs	r2, r1
 800563c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a80      	ldr	r2, [pc, #512]	; (8005844 <UART_SetConfig+0x278>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d120      	bne.n	800568a <UART_SetConfig+0xbe>
 8005648:	4b7f      	ldr	r3, [pc, #508]	; (8005848 <UART_SetConfig+0x27c>)
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	2b03      	cmp	r3, #3
 8005652:	d817      	bhi.n	8005684 <UART_SetConfig+0xb8>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0x90>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	0800566d 	.word	0x0800566d
 8005660:	08005679 	.word	0x08005679
 8005664:	0800567f 	.word	0x0800567f
 8005668:	08005673 	.word	0x08005673
 800566c:	2301      	movs	r3, #1
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e0b5      	b.n	80057de <UART_SetConfig+0x212>
 8005672:	2302      	movs	r3, #2
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e0b2      	b.n	80057de <UART_SetConfig+0x212>
 8005678:	2304      	movs	r3, #4
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e0af      	b.n	80057de <UART_SetConfig+0x212>
 800567e:	2308      	movs	r3, #8
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e0ac      	b.n	80057de <UART_SetConfig+0x212>
 8005684:	2310      	movs	r3, #16
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e0a9      	b.n	80057de <UART_SetConfig+0x212>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a6f      	ldr	r2, [pc, #444]	; (800584c <UART_SetConfig+0x280>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d124      	bne.n	80056de <UART_SetConfig+0x112>
 8005694:	4b6c      	ldr	r3, [pc, #432]	; (8005848 <UART_SetConfig+0x27c>)
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800569c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a0:	d011      	beq.n	80056c6 <UART_SetConfig+0xfa>
 80056a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a6:	d817      	bhi.n	80056d8 <UART_SetConfig+0x10c>
 80056a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ac:	d011      	beq.n	80056d2 <UART_SetConfig+0x106>
 80056ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b2:	d811      	bhi.n	80056d8 <UART_SetConfig+0x10c>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <UART_SetConfig+0xf4>
 80056b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056bc:	d006      	beq.n	80056cc <UART_SetConfig+0x100>
 80056be:	e00b      	b.n	80056d8 <UART_SetConfig+0x10c>
 80056c0:	2300      	movs	r3, #0
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e08b      	b.n	80057de <UART_SetConfig+0x212>
 80056c6:	2302      	movs	r3, #2
 80056c8:	77fb      	strb	r3, [r7, #31]
 80056ca:	e088      	b.n	80057de <UART_SetConfig+0x212>
 80056cc:	2304      	movs	r3, #4
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e085      	b.n	80057de <UART_SetConfig+0x212>
 80056d2:	2308      	movs	r3, #8
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e082      	b.n	80057de <UART_SetConfig+0x212>
 80056d8:	2310      	movs	r3, #16
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e07f      	b.n	80057de <UART_SetConfig+0x212>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a5b      	ldr	r2, [pc, #364]	; (8005850 <UART_SetConfig+0x284>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d124      	bne.n	8005732 <UART_SetConfig+0x166>
 80056e8:	4b57      	ldr	r3, [pc, #348]	; (8005848 <UART_SetConfig+0x27c>)
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80056f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80056f4:	d011      	beq.n	800571a <UART_SetConfig+0x14e>
 80056f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80056fa:	d817      	bhi.n	800572c <UART_SetConfig+0x160>
 80056fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005700:	d011      	beq.n	8005726 <UART_SetConfig+0x15a>
 8005702:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005706:	d811      	bhi.n	800572c <UART_SetConfig+0x160>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <UART_SetConfig+0x148>
 800570c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005710:	d006      	beq.n	8005720 <UART_SetConfig+0x154>
 8005712:	e00b      	b.n	800572c <UART_SetConfig+0x160>
 8005714:	2300      	movs	r3, #0
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e061      	b.n	80057de <UART_SetConfig+0x212>
 800571a:	2302      	movs	r3, #2
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e05e      	b.n	80057de <UART_SetConfig+0x212>
 8005720:	2304      	movs	r3, #4
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e05b      	b.n	80057de <UART_SetConfig+0x212>
 8005726:	2308      	movs	r3, #8
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e058      	b.n	80057de <UART_SetConfig+0x212>
 800572c:	2310      	movs	r3, #16
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e055      	b.n	80057de <UART_SetConfig+0x212>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a47      	ldr	r2, [pc, #284]	; (8005854 <UART_SetConfig+0x288>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d124      	bne.n	8005786 <UART_SetConfig+0x1ba>
 800573c:	4b42      	ldr	r3, [pc, #264]	; (8005848 <UART_SetConfig+0x27c>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005748:	d011      	beq.n	800576e <UART_SetConfig+0x1a2>
 800574a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800574e:	d817      	bhi.n	8005780 <UART_SetConfig+0x1b4>
 8005750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005754:	d011      	beq.n	800577a <UART_SetConfig+0x1ae>
 8005756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800575a:	d811      	bhi.n	8005780 <UART_SetConfig+0x1b4>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <UART_SetConfig+0x19c>
 8005760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005764:	d006      	beq.n	8005774 <UART_SetConfig+0x1a8>
 8005766:	e00b      	b.n	8005780 <UART_SetConfig+0x1b4>
 8005768:	2300      	movs	r3, #0
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e037      	b.n	80057de <UART_SetConfig+0x212>
 800576e:	2302      	movs	r3, #2
 8005770:	77fb      	strb	r3, [r7, #31]
 8005772:	e034      	b.n	80057de <UART_SetConfig+0x212>
 8005774:	2304      	movs	r3, #4
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	e031      	b.n	80057de <UART_SetConfig+0x212>
 800577a:	2308      	movs	r3, #8
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e02e      	b.n	80057de <UART_SetConfig+0x212>
 8005780:	2310      	movs	r3, #16
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e02b      	b.n	80057de <UART_SetConfig+0x212>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a33      	ldr	r2, [pc, #204]	; (8005858 <UART_SetConfig+0x28c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d124      	bne.n	80057da <UART_SetConfig+0x20e>
 8005790:	4b2d      	ldr	r3, [pc, #180]	; (8005848 <UART_SetConfig+0x27c>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005798:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800579c:	d011      	beq.n	80057c2 <UART_SetConfig+0x1f6>
 800579e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057a2:	d817      	bhi.n	80057d4 <UART_SetConfig+0x208>
 80057a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057a8:	d011      	beq.n	80057ce <UART_SetConfig+0x202>
 80057aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057ae:	d811      	bhi.n	80057d4 <UART_SetConfig+0x208>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <UART_SetConfig+0x1f0>
 80057b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057b8:	d006      	beq.n	80057c8 <UART_SetConfig+0x1fc>
 80057ba:	e00b      	b.n	80057d4 <UART_SetConfig+0x208>
 80057bc:	2300      	movs	r3, #0
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e00d      	b.n	80057de <UART_SetConfig+0x212>
 80057c2:	2302      	movs	r3, #2
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e00a      	b.n	80057de <UART_SetConfig+0x212>
 80057c8:	2304      	movs	r3, #4
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e007      	b.n	80057de <UART_SetConfig+0x212>
 80057ce:	2308      	movs	r3, #8
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e004      	b.n	80057de <UART_SetConfig+0x212>
 80057d4:	2310      	movs	r3, #16
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e001      	b.n	80057de <UART_SetConfig+0x212>
 80057da:	2310      	movs	r3, #16
 80057dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e6:	d16b      	bne.n	80058c0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80057e8:	7ffb      	ldrb	r3, [r7, #31]
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d838      	bhi.n	8005860 <UART_SetConfig+0x294>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0x228>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005821 	.word	0x08005821
 80057fc:	08005829 	.word	0x08005829
 8005800:	08005861 	.word	0x08005861
 8005804:	0800582f 	.word	0x0800582f
 8005808:	08005861 	.word	0x08005861
 800580c:	08005861 	.word	0x08005861
 8005810:	08005861 	.word	0x08005861
 8005814:	08005837 	.word	0x08005837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005818:	f7ff fb80 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 800581c:	61b8      	str	r0, [r7, #24]
        break;
 800581e:	e024      	b.n	800586a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7ff fb9e 	bl	8004f60 <HAL_RCC_GetPCLK2Freq>
 8005824:	61b8      	str	r0, [r7, #24]
        break;
 8005826:	e020      	b.n	800586a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <UART_SetConfig+0x290>)
 800582a:	61bb      	str	r3, [r7, #24]
        break;
 800582c:	e01d      	b.n	800586a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582e:	f7ff faff 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005832:	61b8      	str	r0, [r7, #24]
        break;
 8005834:	e019      	b.n	800586a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583a:	61bb      	str	r3, [r7, #24]
        break;
 800583c:	e015      	b.n	800586a <UART_SetConfig+0x29e>
 800583e:	bf00      	nop
 8005840:	efff69f3 	.word	0xefff69f3
 8005844:	40013800 	.word	0x40013800
 8005848:	40021000 	.word	0x40021000
 800584c:	40004400 	.word	0x40004400
 8005850:	40004800 	.word	0x40004800
 8005854:	40004c00 	.word	0x40004c00
 8005858:	40005000 	.word	0x40005000
 800585c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	77bb      	strb	r3, [r7, #30]
        break;
 8005868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d073      	beq.n	8005958 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	005a      	lsls	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	441a      	add	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b0f      	cmp	r3, #15
 800588a:	d916      	bls.n	80058ba <UART_SetConfig+0x2ee>
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005892:	d212      	bcs.n	80058ba <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f023 030f 	bic.w	r3, r3, #15
 800589c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	89fb      	ldrh	r3, [r7, #14]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	89fa      	ldrh	r2, [r7, #14]
 80058b6:	60da      	str	r2, [r3, #12]
 80058b8:	e04e      	b.n	8005958 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	77bb      	strb	r3, [r7, #30]
 80058be:	e04b      	b.n	8005958 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058c0:	7ffb      	ldrb	r3, [r7, #31]
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d827      	bhi.n	8005916 <UART_SetConfig+0x34a>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x300>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	08005901 	.word	0x08005901
 80058d8:	08005917 	.word	0x08005917
 80058dc:	08005907 	.word	0x08005907
 80058e0:	08005917 	.word	0x08005917
 80058e4:	08005917 	.word	0x08005917
 80058e8:	08005917 	.word	0x08005917
 80058ec:	0800590f 	.word	0x0800590f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f0:	f7ff fb14 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 80058f4:	61b8      	str	r0, [r7, #24]
        break;
 80058f6:	e013      	b.n	8005920 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f8:	f7ff fb32 	bl	8004f60 <HAL_RCC_GetPCLK2Freq>
 80058fc:	61b8      	str	r0, [r7, #24]
        break;
 80058fe:	e00f      	b.n	8005920 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005900:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <UART_SetConfig+0x3a4>)
 8005902:	61bb      	str	r3, [r7, #24]
        break;
 8005904:	e00c      	b.n	8005920 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005906:	f7ff fa93 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 800590a:	61b8      	str	r0, [r7, #24]
        break;
 800590c:	e008      	b.n	8005920 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005912:	61bb      	str	r3, [r7, #24]
        break;
 8005914:	e004      	b.n	8005920 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	77bb      	strb	r3, [r7, #30]
        break;
 800591e:	bf00      	nop
    }

    if (pclk != 0U)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d018      	beq.n	8005958 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	085a      	lsrs	r2, r3, #1
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	441a      	add	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b0f      	cmp	r3, #15
 800593e:	d909      	bls.n	8005954 <UART_SetConfig+0x388>
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005946:	d205      	bcs.n	8005954 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	b29a      	uxth	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60da      	str	r2, [r3, #12]
 8005952:	e001      	b.n	8005958 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005964:	7fbb      	ldrb	r3, [r7, #30]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	007a1200 	.word	0x007a1200

08005974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a72:	d10a      	bne.n	8005a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b098      	sub	sp, #96	; 0x60
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac8:	f7fb ffea 	bl	8001aa0 <HAL_GetTick>
 8005acc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d12e      	bne.n	8005b3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f88c 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d021      	beq.n	8005b3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b14:	647b      	str	r3, [r7, #68]	; 0x44
 8005b16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e6      	bne.n	8005af6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e062      	b.n	8005c00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d149      	bne.n	8005bdc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b50:	2200      	movs	r2, #0
 8005b52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f856 	bl	8005c08 <UART_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d03c      	beq.n	8005bdc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b80:	633b      	str	r3, [r7, #48]	; 0x30
 8005b82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e6      	bne.n	8005b62 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3308      	adds	r3, #8
 8005b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bb4:	61fa      	str	r2, [r7, #28]
 8005bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	69b9      	ldr	r1, [r7, #24]
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e5      	bne.n	8005b94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e011      	b.n	8005c00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3758      	adds	r7, #88	; 0x58
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c18:	e049      	b.n	8005cae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d045      	beq.n	8005cae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c22:	f7fb ff3d 	bl	8001aa0 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d302      	bcc.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e048      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d031      	beq.n	8005cae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d110      	bne.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f8ff 	bl	8005e64 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e029      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c88:	d111      	bne.n	8005cae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f8e5 	bl	8005e64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e00f      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	bf0c      	ite	eq
 8005cbe:	2301      	moveq	r3, #1
 8005cc0:	2300      	movne	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d0a6      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b096      	sub	sp, #88	; 0x58
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2222      	movs	r2, #34	; 0x22
 8005d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d028      	beq.n	8005d5e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d10:	4a3e      	ldr	r2, [pc, #248]	; (8005e0c <UART_Start_Receive_DMA+0x134>)
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d18:	4a3d      	ldr	r2, [pc, #244]	; (8005e10 <UART_Start_Receive_DMA+0x138>)
 8005d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d20:	4a3c      	ldr	r2, [pc, #240]	; (8005e14 <UART_Start_Receive_DMA+0x13c>)
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d28:	2200      	movs	r2, #0
 8005d2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3324      	adds	r3, #36	; 0x24
 8005d36:	4619      	mov	r1, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	f7fd f8d4 	bl	8002eec <HAL_DMA_Start_IT>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d009      	beq.n	8005d5e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2210      	movs	r2, #16
 8005d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e051      	b.n	8005e02 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d018      	beq.n	8005d98 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d86:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	653b      	str	r3, [r7, #80]	; 0x50
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3308      	adds	r3, #8
 8005db6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005db8:	637a      	str	r2, [r7, #52]	; 0x34
 8005dba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e5      	bne.n	8005d98 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	613b      	str	r3, [r7, #16]
   return(result);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dec:	623a      	str	r2, [r7, #32]
 8005dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	69f9      	ldr	r1, [r7, #28]
 8005df2:	6a3a      	ldr	r2, [r7, #32]
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3758      	adds	r7, #88	; 0x58
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08005f2d 	.word	0x08005f2d
 8005e10:	08006053 	.word	0x08006053
 8005e14:	08006091 	.word	0x08006091

08005e18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b089      	sub	sp, #36	; 0x24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6979      	ldr	r1, [r7, #20]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e6      	bne.n	8005e20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005e58:	bf00      	nop
 8005e5a:	3724      	adds	r7, #36	; 0x24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b095      	sub	sp, #84	; 0x54
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e6      	bne.n	8005e6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f023 0301 	bic.w	r3, r3, #1
 8005eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e5      	bne.n	8005e9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d118      	bne.n	8005f0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	e853 3f00 	ldrex	r3, [r3]
 8005ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f023 0310 	bic.w	r3, r3, #16
 8005eee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	6979      	ldr	r1, [r7, #20]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	613b      	str	r3, [r7, #16]
   return(result);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e6      	bne.n	8005eda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f20:	bf00      	nop
 8005f22:	3754      	adds	r7, #84	; 0x54
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b09c      	sub	sp, #112	; 0x70
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d071      	beq.n	8006026 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f68:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	667b      	str	r3, [r7, #100]	; 0x64
 8005f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f9c:	647a      	str	r2, [r7, #68]	; 0x44
 8005f9e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e5      	bne.n	8005f7c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	623b      	str	r3, [r7, #32]
   return(result);
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fd0:	633a      	str	r2, [r7, #48]	; 0x30
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d118      	bne.n	8006026 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	60fb      	str	r3, [r7, #12]
   return(result);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f023 0310 	bic.w	r3, r3, #16
 8006008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800600a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	69b9      	ldr	r1, [r7, #24]
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	617b      	str	r3, [r7, #20]
   return(result);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e6      	bne.n	8005ff4 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006028:	2200      	movs	r2, #0
 800602a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006030:	2b01      	cmp	r3, #1
 8006032:	d107      	bne.n	8006044 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006036:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800603a:	4619      	mov	r1, r3
 800603c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800603e:	f7fb f92b 	bl	8001298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006042:	e002      	b.n	800604a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006044:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006046:	f7ff faa3 	bl	8005590 <HAL_UART_RxCpltCallback>
}
 800604a:	bf00      	nop
 800604c:	3770      	adds	r7, #112	; 0x70
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800606a:	2b01      	cmp	r3, #1
 800606c:	d109      	bne.n	8006082 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006074:	085b      	lsrs	r3, r3, #1
 8006076:	b29b      	uxth	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7fb f90c 	bl	8001298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006080:	e002      	b.n	8006088 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fa8e 	bl	80055a4 <HAL_UART_RxHalfCpltCallback>
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b80      	cmp	r3, #128	; 0x80
 80060b8:	d109      	bne.n	80060ce <UART_DMAError+0x3e>
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b21      	cmp	r3, #33	; 0x21
 80060be:	d106      	bne.n	80060ce <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80060c8:	6978      	ldr	r0, [r7, #20]
 80060ca:	f7ff fea5 	bl	8005e18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d109      	bne.n	80060f0 <UART_DMAError+0x60>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b22      	cmp	r3, #34	; 0x22
 80060e0:	d106      	bne.n	80060f0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	f7ff feba 	bl	8005e64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f6:	f043 0210 	orr.w	r2, r3, #16
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006100:	6978      	ldr	r0, [r7, #20]
 8006102:	f7ff fa59 	bl	80055b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b08c      	sub	sp, #48	; 0x30
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	4613      	mov	r3, r2
 800611a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006122:	2b20      	cmp	r3, #32
 8006124:	d142      	bne.n	80061ac <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e03b      	b.n	80061ae <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	461a      	mov	r2, r3
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff fdc5 	bl	8005cd8 <UART_Start_Receive_DMA>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006158:	2b00      	cmp	r3, #0
 800615a:	d124      	bne.n	80061a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006160:	2b01      	cmp	r3, #1
 8006162:	d11d      	bne.n	80061a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2210      	movs	r2, #16
 800616a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	617b      	str	r3, [r7, #20]
   return(result);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f043 0310 	orr.w	r3, r3, #16
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
 800618c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6a39      	ldr	r1, [r7, #32]
 8006190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	61fb      	str	r3, [r7, #28]
   return(result);
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e6      	bne.n	800616c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800619e:	e002      	b.n	80061a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80061a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061aa:	e000      	b.n	80061ae <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80061ac:	2302      	movs	r3, #2
  }
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3730      	adds	r7, #48	; 0x30
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <__libc_init_array>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4d0d      	ldr	r5, [pc, #52]	; (80061f0 <__libc_init_array+0x38>)
 80061bc:	4c0d      	ldr	r4, [pc, #52]	; (80061f4 <__libc_init_array+0x3c>)
 80061be:	1b64      	subs	r4, r4, r5
 80061c0:	10a4      	asrs	r4, r4, #2
 80061c2:	2600      	movs	r6, #0
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	d109      	bne.n	80061dc <__libc_init_array+0x24>
 80061c8:	4d0b      	ldr	r5, [pc, #44]	; (80061f8 <__libc_init_array+0x40>)
 80061ca:	4c0c      	ldr	r4, [pc, #48]	; (80061fc <__libc_init_array+0x44>)
 80061cc:	f000 f820 	bl	8006210 <_init>
 80061d0:	1b64      	subs	r4, r4, r5
 80061d2:	10a4      	asrs	r4, r4, #2
 80061d4:	2600      	movs	r6, #0
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	d105      	bne.n	80061e6 <__libc_init_array+0x2e>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e0:	4798      	blx	r3
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7ee      	b.n	80061c4 <__libc_init_array+0xc>
 80061e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ea:	4798      	blx	r3
 80061ec:	3601      	adds	r6, #1
 80061ee:	e7f2      	b.n	80061d6 <__libc_init_array+0x1e>
 80061f0:	08006260 	.word	0x08006260
 80061f4:	08006260 	.word	0x08006260
 80061f8:	08006260 	.word	0x08006260
 80061fc:	08006264 	.word	0x08006264

08006200 <memset>:
 8006200:	4402      	add	r2, r0
 8006202:	4603      	mov	r3, r0
 8006204:	4293      	cmp	r3, r2
 8006206:	d100      	bne.n	800620a <memset+0xa>
 8006208:	4770      	bx	lr
 800620a:	f803 1b01 	strb.w	r1, [r3], #1
 800620e:	e7f9      	b.n	8006204 <memset+0x4>

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
